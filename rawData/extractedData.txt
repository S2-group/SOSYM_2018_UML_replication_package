NEW_ID	ID	Assigned to	Search method	Automatic search source	Main study	Snowballing activity	Type	Title	Authors	Institutions	Venue	Venue acronym	Year	Publication type	Application domains	Specific application domains	Research strategies	Execution strategy	Simulation	Intended benefits	Process	Extensible	Readiness level	Partial models	UML diagrams	UML diagram types	Action languages	Implicit UML profile	Explicit UML profiles required	Modeling tool	fUML	MDA levels covered	Non-functional properties	Production system	Execution tools and technologies	Model-level debugging	Formal specification languages	Intermediate artifacts	Software platform	Translation targets	Translation steps	Traceability links support	Interpretation engine	Target platforms	Compiler	Applied research methods	Type of evidence	Type of evidence by category	Evaluation systems	Type of evaluation systems	Limitations and unsolved challenges	Type of limitations and unsolved challenges	Notes	TABLE_ID	UID	T5	T6	Fede	T	N/A	N/A	N/A	T	Fujaba	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	T	YES	PROD # CORRECT	NO	YES	MEDIUM	NO	CLASS # ACT # COMM # SM	S # B	umlactions # java # graph_rewrite_rules	YES	NO	fujaba	NO	PIM	NO	YES	java	YES	NO	NO	NO	java	1	YES	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	"In future work, we plan to develop further model-basedanalysis tools and apply di erent analysis methodologiesbased on the proposed framework. To also support method-ologies that build upon probabilities annotated in the UMLmodel, we will extend our framework to allow for obtainingall possible execution traces from a UML model and weightthe values in the traces, such as execution time, according tothe annotated probabilities in each trace. Moreover, we willwork towards supporting parallelism in UML activities andadditional parts of UML that are currently not integratedwith fUML, such as state machines"	F_additional_analysis #F_expressiveness	CHECK TECHNOLOGICAL TRANSFER	T05	57	T19	T10	Fede	T	N/A	N/A	N/A	T	Syntony	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	T	YES	CORRECT	NO	NO	LOW	NO	COMP # STRUCT # SM # ACT	S # B	NO	NO	ADHOC	syntony	NO	PIM # PSM	NO	NO	java # omnet++	YES	NO	NO	YES	c++	1	NO	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A		T19	70	T13	T15	Fede	T	N/A	N/A	N/A	T	Modeldriven.org	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	I	NO	CORRECT	NO	NO	LOW	NO	CLASS # ACT	S # B	alf	YES	NO	TOOL_INDEP	YES	PIM	NO	YES	java # fumlref	NO	NO	N/A	N/A	N/A	N/A	N/A	fumlref	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A		T13	65	T2	T38	Fede	T	N/A	N/A	N/A	T	BOUML	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	T	NO	PROD	NO	YES	LOW	NO	CLASS # SM # ACT # DEP	S # B	java # c++ # idl # php	YES	NO	bouml	NO	PIM	NO	YES	qt	NO	NO	NO	NO	 c++ # java # php # python # idl	1	NO	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A		T02	54	T15	T7	Fede	T	N/A	N/A	N/A	T	Papyrus - Qompass	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	T	NO	PROD	NO	NO	LOW	NO	COMP # SM # STRUCT # DEP	S # B	c++ # acceleo	NO	marte # ADHOC	papyrus	NO	PIM # PSM # HW	NO	YES	java # acceleo	NO	NO	uml_model	NO	c++	2	NO	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	"Moreover, due to the fact that generally software engineerslack of skills in formal techniques, we investigate the useof a Model Checker in our prototype to analyse automati-cally the behaviors of activities in order to detect deadlocks,livelocks and to calculate reachability coverage."	F_model_checking		T15	67	T14	T8	Fede	T	N/A	N/A	N/A	T	Papyrus - Moka	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	I	YES	CORRECT	NO	YES	LOW	NO	CLASS # ACT # SM	S # B	alf	YES	NO	papyrus	YES	PIM	NO	NO	java	YES	NO	N/A	N/A	N/A	N/A	N/A	moka	N/A	N/A	N/A	N/A	N/A	N/A	N/A	"Future work consists of taking accountthe impact of SW platform in the RTES performancemetamodel. This includes the workload of SW platformservices (such as file access and memory allocation) as wellas scheduling of tasks with different policies."	F_additional_analysis		T14	66	T16	N10	Federico	T	N/A	N/A	N/A	T	Papyrus-RT	Papyrus-IC	N/A	N/A	N/A	N/A	N/A	SPECIFIC	RTES	N/A	T	NO	PROD # QUALITY # CORRECT	NO	YES	HIGH	NO	CLASS # COMP # STRUCT # SM	B # S	c++	NO	UML-RT	papyrus	NO	PIM # PSM	performance # reliability	YES	c++	NO	NO	c++	YES	c++	2	NO	N/A	N/A	N/A	N/A	industrial use-cases	N/A	N/A	N/A	N/A	F_expressiveness		T16		T8	T1	Fede	T	N/A	N/A	N/A	T	IBM RSA	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	T	YES	PROD # CORRECT	NO	YES	HIGH	NO	ACT # INTER # SM # CLASS # SEQ	S # B	ual # java # c++ # c_sharp	YES	NO	rsa	NO	PIM # PSM	NO	YES	java	YES	NO	NO	YES	java # c++ # c_sharp	?	YES	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	no clear which diagrams are for code gen	T08	60	T10	T17	Fede	T	N/A	N/A	N/A	T	IBM Tau	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	T	YES	PROD # CORRECT	NO	YES	HIGH	NO	CLASS # ACT # SM	S # B	u2 # java # c_base # c++ # c_sharp	YES	NO	rtau	NO	PIM # PSM	NO	YES	java	YES	NO	NO	YES	java # c_base # c++ # c_sharp	?	YES	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A		T10	62	T1	T19	Fede	T	N/A	N/A	N/A	T	ARTISAN Studio Sysim	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	T	YES	CORRECT	NO	NO	HIGH	NO	N/A	N/A	N/A	NO	sysml	artisan	NO	N/A	NO	NO	.net	NO	NO	N/A	YES	.net	?	NO	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	The next steps are in the direction of early verification and validation of embedded and real-time systems by means of their UML specifications. A UML virtual machine using FUMBeS is envisaged. It would simulate of the whole embedded and real-time system, i.e. the execution of its active objects and their concurrent execution, respecting the time constraints. In addition, a CASE tool to execute test cases upon the UML specification is also foreseen. This tool would allow the specification and automatic execution of test cases during the modeling phase. Thus, if any change in the UML model affects any behavior considered correct, the engineers would be warned about the problems.	F_additional_analysis	based on SysML, info hard to find	T01	53	T9	T2	Fede	T	N/A	N/A	N/A	T	IBM RSARTE	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	T	YES	PROD # CORRECT	NO	YES	HIGH	NO	ACT # SEQ # COMP # STRUCT # CLASS # SM	S # B	ual # java # c++ # c_base	NO	umlrt	rsarte	NO	PIM # PSM	NO	YES	java	YES	NO	NO	YES	rtjava # java # c++ # c_base	?	YES	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	to merge with T1 (same tool)	T09	61	T18	T29	Fede	T	N/A	N/A	N/A	T	Sparx Enterprise Architect	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	T	YES	PROD # CORRECT	NO	YES	HIGH	NO	CLASS # SM # SEQ # ACT	S # B	java # c_base # c++	YES	NO	sparx	YES	PIM # PSM	NO	YES	java	YES	NO	N/A	YES	c_base # c++ # c_sharp # actionscript # delphi # java # php # python # vb # vhdl # systemc # verilog	?	YES	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A		T18	69	T7	T3	Fede	T	N/A	N/A	N/A	T	IBM Rational Rose (family)	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	T	NO	PROD	NO	YES	HIGH	NO	CLASS	S # B	ual # ada # c++ # corba # java # vb	YES	NO	rrose	NO	PIM # PSM	NO	YES	java	YES	NO	NO	YES	ada # c++ # corba # java # vb	?	YES	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A		T07	59	T6	T4	Fede	T	N/A	N/A	N/A	T	IBM Rational Rhapsody	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	T	YES	PROD # CORRECT	NO	YES	HIGH	NO	ACT # SM # CLASS	S # B	alf # java # c++ # c_base # c_sharp # ada	NO	sysml	rhap	NO	PIM # PSM	NO	YES	java	YES	NO	NO	YES	java # c++ # c_base # c_sharp # ada	?	YES	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A		T06	58	T3	T45	Fede	T	N/A	N/A	N/A	T	Cameo Simulation toolkit	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	T	YES	CORRECT	NO	NO	HIGH	NO	SM # ACT	S # B	javascript # ruby # python # groovy	NO	sysml	magicdraw	YES	PIM	NO	NO	cameo # java	YES	NO	N/A	YES	scxml # java	?	NO	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A		T03	55	T17	T46	Fede	T	N/A	N/A	N/A	T	QM	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	T	NO	PROD	NO	NO	HIGH	NO	SM # ACT	B	c_base # c++	YES	NO	qm	NO	PIM # PSM	NO	YES	c++	NO	NO	NO	NO	c_base # c++	1	YES	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A		T17	68	T4	T22	Fede	T	N/A	N/A	N/A	T	CHESS	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	T	NO	CORRECT # PROD # QUALITY	YES	NO	MEDIUM	NO	CLASS # COMP # STRUCT # SM # DEP # OBJ	S # B	alf	NO	marte # chess_ADHOC	chess # papyrus	YES	PIM # PSM # HW	performance	YES	xpand # qvt # java	NO	NO	uml_model # dsl_model	NO	ada # c++	3	YES	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A		T04	56	T12	T5	Fede	T	N/A	N/A	N/A	T	One Fact BridgePoint	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	T # I	YES	PROD # CORRECT	YES	YES	HIGH	NO	CLASS # SM	S # B	oal	NO	xtuml_ADHOC	bridge	NO	PIM # PSM	NO	YES	java # xml	YES	NO	NO	YES	c_base # c++ # systemc	1	NO	BridgePoint	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A		T12	64	T11	T50	Fede	T	N/A	N/A	N/A	T	iUML	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	T # I	YES	PROD # CORRECT	YES	YES	HIGH	NO	CLASS # SM # UC # SEQ # COMM	S # B	asl	NO	xuml_ADHOC	iuml	NO	PIM	NO	YES	xuml # asl	YES	NO	dsl_model	YES	c_base # c++ # ada # java	3	YES	iUML	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A	N/A		T11	63	P1	N2	Ivano	A	ACM	N/A	N/A	A	Model-level, Platform-independent Debugging in the Context of the Model-driven Development of Real-time Systems	Mojtaba Bagherzadeh and Nicolas Hili and Juergen Dingel	School of Computing, Queen’s University, Kingston, Canada 	Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering	FSE	2016	C	SPECIFIC	RTES	N/A	T	YES	PROD	NO	NO	LOW	NO	COMP # SM	B # S	umlactions	NO	umlrt	papyrus	NO	PIM	NO	NO	eclipseuml2 # etl # c++ # java	YES	NO	uml_model	YES	C++	2	YES	N/A	N/A	N/A	VALID	In order to verify our approach, we applied the instrumentation to several RTE system models. Models have di erent complexities that range from simple models containing two states to models with more than 250 states. 	EMPIRICAL_LAB	"Simple models include the Counter and the Car Door Central Lock systems. Counter is a simple system which counts the elapsed seconds. Car Door Central Lock is a control system for locking and unlocking car doors. The Parcel Router [26, 41] is an automatic system where tagged parcels are routed through successive chutes and switchers to a corresponding bin. We created two di erent versions of the same system. The complete version checks whenever parcel jam occurs and prevents a parcel from being transfered from one chute to another one until it is empty. The simpli ed version ignores jams.The Rover system model [1] allows an autonomous robot to move through di erent directions. It is equipped with three wheels driven by two engines. It can move forward, move backwards, and rotate.The FailOver system [6, 23] is an implementation of the fail-over mechanism. It involves a set of servers processing client requests. "	synthetic # controller # mobile_robot # manufacturing # communication	Currently, instrumentation only applies to explicitly defined transitions. Since transitions from the history state to pos- sible target states are implicitly implemented, the current approach does not provide support for suspending the ex- ecution before the entry action code of a state when it is reached from the history state. The same limitation exists for exit code on sub-states during a group transition. Also, our current implementation only supports value change of primitive attributes.	F_tool_enhancement # F_expressiveness		P01	72	P2	N4	Ivano	A	IEEE	N/A	N/A	A	Integration of UML models in FMI-Based co-simulation	"S. Guermazi; S. Dhouib; A. Cuccuru; C. Letavernier; S. Gerard"	CEA, LIST, Laboratoire dIngenierie dirigee par les mode les pour les Syste mes Embarques, France 	2016 Symposium on Theory of Modeling and Simulation (TMS-DEVS)	TMSDEVS	2016	C	SPECIFIC	CPS	N/A	I	YES	CORRECT # PROD # QUALITY	NO	NO	LOW	NO	COMP # ACT # CLASS	B # S	umlactions	YES	ADHOC	papyrus	YES	PIM	NO	NO	java # moka # eclipseuml2	NO	NO	N/A	N/A	N/A	N/A	N/A	ADHOC	N/A	N/A	VALID	The approach was illustrated by a representative example that co-simulates a mixed co-simulation model which connects an imported FMU with a local UML class (with untimed and timed behavior). 	EXAMPLE	The “Inc” class in Figure 4 is an imported FMU (from FMU SDK[14]). It increments a counter at each instant t+n where n_N and uses a step of size h=0.5. It has no inputs and one output (i.e. the value of the counter).	synthetic	"Works in progress include validation of the experiments with a real use case.For instance FMI standard doesn’t provide a mechanism allowing an FMU to output an instantaneous reaction to a changed input value during simulation, something important for efficient simulation of CPS. Next versions of FMI for co- simulation are intended to propose new features to deal with this issue so that the co-simulation approach we proposed in this paper can be improved."	F_platform_improvement # F_tool_enhancement # F_additional_evaluation		P02	74	P3	N1	Ivano	A	SCOPUS	N/A	N/A	A	On the automated translational execution of the action language for foundational UML	Ciccozzi F.	Department of Innovation, Design, and Engineering (IDT), MRTC, Malardalen University, 72123 P.O. Box 883, Vasteras, Sweden 	Software and Systems Modeling	SOSYM	2016	J	GENERIC	GENERIC	N/A	T	YES	PROD	NO	NO	HIGH	NO	CLASS 	S	alf # c++	YES	NO	papyrus	YES	PIM	NO	YES	java # eclipseuml2 # xtend	NO	NO	NO	NO	c++	1	NO	N/A	N/A	N/A	EVAL	The solution presented in this paper has been assessed on industrial applications to verify its applicability to complex systems as well as its scalability. 	SET_OF_INDUSTRIAL_EXAMPLES	The system we exploit for running our solution is represented by a carrier robot self-orienting in a closed environment. The task of this terrestrial robot consists of travelling between checkpoints in a delimited and known environment and simu- lating item retrieval and delivery. 	mobile_robot	"Although tested and evaluated, the validity of the transformation does not induce the validity of the generated C++. In other words, the transformation pro- duces code which effectively represents what is defined in the model; if the model is not valid, then the transformation is not able to produce valid C++. An interesting direction that stems from the contribution presented in this work is to look into reverse engineering of C++ code (legacy or generated) to ALF for consistency assurance. An interesting enhancement of the translation process would be the possibility for the developer to configure the transformation through parameters in order to reach a specific result. An example of this could be the possibility to exploit different mechanisms for memory management and let the developer select the one to use when launching the transfor- mation. The transformation process has been designed in a way that should enable partial reuse of the code generator when targeting another object-oriented language. We have planned to add Java as target language for our code genera- tor. Doing so, we would be able to measure the actual effort needed for such an enhancement. Moreover, we have already started an effort towards direct compilation of UML and ALF, without intermediate translations to programming languages such as C++, to see to which extent we can preserve execution semantics of ALF in the generated executables."	F_code_optimization # F_execution_correctness # F_code_optimization # F_additional_target		P03	71	P4	N3	Ivano	A	ACM	N/A	N/A	A	A Model-Driven Engineering Methodology to Design Parallel and Distributed Embedded Systems	Andrea Enrici and Ludovic Apvrille and Renaud Pacalet	LTCI, CNRS, Telecom ParisTech, Universite _ Paris-Saclay, France 	ACM Transactions on Design Automation of Electronic Systems (TODAES)	TODAES	2016	J	SPECIFIC	PARALLEL # SOC	N/A	T	YES	PROD # QUALITY # CORRECT	YES	NO	LOW	NO	SEQ # ACT # PACK # DEP # COMP	B # S	umlactions	NO	sysml # ADHOC	DIPLODOCUS_ADHOC	NO	PIM # PSM # HW	performance # adaptability	YES	java	NO	tml	dsl_model	NO	c_base # c++ # tml	2	NO	N/A	N/A	N/A	VALID	The effectiveness of our solution in terms of better design quality (e.g., portability, time) is demonstrated with the design of the physical layer of a ZigBee (IEEE 802.15.4) transmitter onto a multi-processor architecture.	EXAMPLE	In this section, we deploy our implementation of the  -chart in TTool/DIPLODOCUS to design the physical (PHY) layer of a ZigBee (IEEE 802.15.4 standard) [IEEE 802.15.4 2003] transmitter. Subsequently, we demonstrate, for a set of different mapping alter- natives, how the  -chart approach improves the portability of a design and reduces the number of design iterations, with respect to the Y-chart.	communication	We envisage to extend the semantics of messages to the asynchronous case in our future work. # As this work is a first contribution that lays the groundwork for future developments, we specify here that our implementation is focused on signal-processing platforms. # As part of our future work, we will extend the scheduling of G to other MoCs. Our implementation of the scheduling analyzer favors an event- driven programming model rather than threads, as using threads and synchronization mechanisms would lead to rigid descriptions that are difficult to be scaled according to the different scenarios that can occur in data-dominated systems # This results in a static allocation policy that we propose to extend to a more dynamic solution (i.e., the memory regions are selected by a memory manager at run-time) as part of our future work,  # As part of our future work, we are improving the implementation of the  -chart in TTool/DIPLODOCUS in terms of (i) modeling (i.e., automate the mapping of CPs and capture communication protocols beyond the ISO/OSI datalink layer) and (ii) code generation (i.e., target platforms other than those dedicated to signal-processing).	F_expressiveness # F_platform_improvement # F_tool_enhancement		P04	73	P5	N9	Ivano	A	SCOPUS	N/A	N/A	A	System-level design based on UML/MARTE for FPGA-based embedded real-time systems	"Leite, Marcela; Wehrmeister, Marco Aurelio"	Instituto Federal Catarinense (IFC Araquari), Araquari, Brazil Federal University of Technology - Parana_ (UTFPR), Curitiba, Brazil	DESIGN AUTOMATION FOR EMBEDDED SYSTEMS	DAES	2016	J	SPECIFIC	RTES	N/A	T	NO	PROD # QUALITY	YES	NO	LOW	NO	CLASS # SEQ	B # S	umlactions	NO	marte	amodert_ADHOC	NO	PIM # PSM	performance # reliability	YES	N/A	NO	NO	NO	NO	VHDL	1	NO	N/A	N/A	N/A	VALID	This work has been evaluated through some case studies, 	EMPIRICAL_LAB	namely, a line-following robot, a valve control system and a digital watch. These systems have been designed using AMoDE- RT approach and implemented as an ASIP on a Xilinx Spartan-6 FPGA (model XC6LX16- CS324, Speed:-3) using Xilinx ISE WebPack.	mobile_robot # consumer_electronics # controller	"Although the achieved results indicate that the expected benefits have been obtained by apply- ing AMoDE-RT and the proposed UML-to-VHDL mapping, some factors may influence the conducted evaluation and the obtained results, as it is usual in any empirical study.Despite the proposed work has been successfully applied to design of a FPGA-based embedded system, the proposed VHDL implementation of DERAF aspects presents some issues. Some aspects adaptation implementation have interfered in the project specification, e.g., DataFreshness reads signal value associated to an OUT port, but such a situation is forbidden in VHDL. To overcome this problem, this port type had to be changed to INOUT, so that this signal could be read internally within the entity. Other issue is related to the interference among aspect adaptations. For instance, a signal created in COPMonitoring had interfered the implementation created for DataFreshness, and hence, COPMonitoring implementation, i.e., its mapping rule scripts, had to be modified.Other issue is regarding the proposed UML-to-VHDL mapping rules. Such mapping rules have been created with the focus on keeping the high-level semantics of the UML model in the generated VHDL description, in order to facilitate the hardware/software co-design and design space exploration. This may be achieved by means of using distinct hardware and software mapping rules on the same source UML model. At the moment, this research has not evaluated the effect of different kinds of strategies for the generated VHDL implementation, e.g., optimizations for area or speed, keeping/flattening hierarchy, or using behavioral or structural description style. Therefore, the obtained FPGA slices utilization rate, as well as system performance, might be directly affected due to a distinct description strategy.Finally, it is important to mention that engineers skills may affect the results discussed in this paper. Engineers knowledge of UML or the application domain may impact the quality of the produced model, leading to inaccuracies in the discussed results. In addition, experience with AMoDE-RT, GenERTiCA as well as the chosen target platform may affect the wayengineers describe the mapping rules. Thus, trained engineers might create better mapping rules for a new target language, e.g., SystemC, Verilog, etc. # As future work, more case studies are already being performed. A similar analysis is going to be executed, in order to demonstrate the suitability and feasibility of using platform independent aspects to design FPGA-based embedded real-time systems. New rules for UML elements that are not yet covered will be defined as well, e.g., state machine diagrams and their relationship with sequence diagrams. In addition, other DERAF aspects need to be implemented in VHDL. However, for that, it is important to obtain or create a set of reusable soft IP components, in order to implement aspects adaptations using their services."	F_expressiveness # F_code_optimization # F_platform_improvement #  F_additional_evaluation		P05	79	P6	I1288	both	A	IEEE	N/A	N/A	A	On the Generation of Full-Fledged Code from UML Profiles and ALF for Complex Systems	"Ciccozzi, Federico ; Cicchetti, Antonio ; Sjodin, Mikael"	malardalen university	ITNG	ITNG	2015	C	SPECIFIC	RTES	N/A	T	NO	CORRECT # QUALITY # PROD	YES	NO	MEDIUM	NO	COMP # STRUCT # CLASS # DEP # SM	S # B	alf	NO	marte # chess_ADHOC	chess # papyrus	YES	PIM # PSM # HW	performance	YES	xpand # qvt	NO	NO	dsl_model	NO	c++	2	YES	N/A	N/A	N/A	EVAL	"The solution we propose in this paper has been validated against an industrial case-study [32] at Ericsson Nikola Tesla (Zagreb, Croatia) under the supervision of Ericsson AB (Stock- holm, Sweden). The generated code for the complete AAL2 system was compiled and executed on the target platform."	INDUSTRIAL_EVALUATION	we employed the Asynchronous Transfer Mode (ATM) [28] Adaptation Layer 2 (AAL2) sub- system, originally intended to adapt voice for transmission over ATM and currently used in telecommunications as part of connectivity platform systems.	communication	"In this work we provide a preliminary solution for multicore-aware generation of code, though leaving most of the multicore-related decisions to the operating system (i.e., OSE). In this sense many details regarding memory, tasks division and allocation, should be both modelled as well as properly taken into account by the transformation process to enable multicore optimised generation of code; work in this direction has already begun. # Particularly relevant would be the possibility to extend the current approach to provide a standalone runtime execution component to be used to deploy models at runtime. The overall idea would be to enable the deployment of design models onto platforms like Linux and OSE."	F_expressiveness # F_code_optimization # F_tool_enhancement		P06	5	P7	I955	both	A	IEEE	N/A	N/A	A	Animated simulation of integrated UML behavioral models based on graph transformation	"Ermel, C.; Holscher, K.; Kuske, S.; Ziemann, P."	university of berlin, university of bremen	Visual Languages and Human-Centric Computing, 2005 IEEE Symposium on	VL/HCC	2015	C	GENERIC	GENERIC	N/A	T	YES	CORRECT	NO	NO	LOW	NO	CLASS # OBJ # SM # COMM # UC	B # S	umlactions	YES	NO	TEXT	NO	PIM	NO	NO	graph_transf # genged	NO	NO	N/A	YES	graph_transf	1	NO	N/A	N/A	N/A	VALID	running example	EXAMPLE	For the example of our drive-through restaurant we choose an animation view where the clients are visualized as cars queueing in front of a restaurant building. Their orders are shown as bubbles inscribed by the order attribute meal, e.g. “Meal 1”. Animated actions are the entering of the drive-through, ordering, being served, eating and leav- ing the queue. The animated actions (and their graphical representations) are coupled to certain graph transfor- mation rules which evoke the corresponding operations. Other graph transformation rules (preparing the operation processing or checking conditions) are not relevant for the animation view. They will be still applied but their effect will not be visualized in a scenario animation.	business_process	Our approach supports basic state machine diagrams (protocol state ma- chines) without advanced features like nested states. # Future work is planned to cover still more selected lan- guage features from UML, especially considering the UML 2.0. Moreover, in complex cases the integration of various UML diagrams may lead to large graph transformation sys- tems which are difficult to handle and to understand. There- fore, for practical use, structuring concepts for graph trans- formation (see e.g. [18]) should be incorporated in the pre- sented approach, and also implemented in the tool AGG, which is the underlying graph transformation engine for both UGT and GENGED. Work is in progress to implement type graphs with inheritance and multiplicities as underly- ing language model in AGG, which should make it easier to go the step from a meta model description (a class di- agram) to the corresponding type graph for a UML based visual language.	F_expressiveness # F_tool_enhancement		P07	4	P8	N6	Ivano	A	SCOPUS	N/A	N/A	A	UML model execution via code generation	Dvai G., Karcsony M., Nmeth B., Kitlei R., Kozsik T.	Eotvos Lorand University, Faculty of Informatics, Budapest, Hungary	Workshop EXE@ MoDELS	EXE	2015	W	GENERIC	GENERIC	N/A	T	YES	CORRECT	NO	NO	LOW	NO	CLASS # SM	B # S	alf	YES	NO	papyrus	YES	PIM	NO	NO	java # moka # eclipseuml2	YES	NO	NO	YES	java	1	NO	N/A	N/A	N/A	VALID	N/A	N/A	N/A	N/A	Since Moka and Moliz use the fUML reference implementation, the performance limitations discussed earlier also apply to these projects, questioning their scalability in the mass test execution use case. # So far, we have not found conceptual limitations of the code generation based approach. Most probably, it would be easier to show information about the runtime state of an interpreter than the internals of generated code running in a separate virtual machine. # We experience that having a good model simulator is only one tiny piece of the infrastructure needed to make executable UML modelling work in an industrial setup: User friendly model editors, model validators, model compare-and-merge tools, version control and team work support, refactoring tools and model compilers are all needed to make a toolchain practical.	F_code_optimization # F_platform_improvement # F_tool_enhancement 		P08	76	P9	N7	Ivano	A	SCOPUS	N/A	N/A	A	UmpleRun: A dynamic analysis tool for textually modeled state machines using umple	Aljamaan H., Lethbridge T., Garzin M., Forward A.	School of Electrical Engineering and Computer Science, University of Ottawa, Ottawa, Canada	Workshop EXE@ MoDELS	EXE	2015	W	GENERIC	GENERIC	N/A	T	YES	CORRECT	NO	NO	LOW	NO	CLASS # SM	B # S	umlactions	YES	NO	Umple	NO	PIM	NO	NO	java	NO	NO	NO	YES	java	1	YES	N/A	N/A	N/A	VALID	Subsequent sections walk through an example of instrumenting our example system and performing dynamic analysis.	EXAMPLE	"sthaantdwguilalrbdecounrdmitiotnivsating example through this paper. It willAalsotatbeediuasgerdamtocaenxpbleaninesUtemd ipnlesidaenad sMtatOe.TLhessytnataexs .ofTthe iCnnarer diagram a transmission model was inspired by a similar model incalled substates.LeFthigburrideg8e.1a8nsdhoLwasgansie_tartee’sdibaogorakm[4o]f. "	controller	As future work, we are investigating automatically generating a comprehensive set of execution scenarios and using this to validate model dynamic behavior. We anticipate enhancing UmpleRun so that the expected output to be matched can examine details of the tracer output, including using pattern matching. Finally, this work can be further extended by building tools that can formally verify conformance of traces to the specified UML models.	F_tool_enhancement # F_additional_analysis		P09	77	P10	N8	Ivano	A	SCOPUS	N/A	N/A	A	A customizable execution engine for models of embedded systems	Zurowska K., Dingel J.	School of Computing, Queen’s University, Kingston, ON, Canada 	Behavior Modeling--Foundations and Applications (conference)	BMFA	2015	C	SPECIFIC	RTES	N/A	T	YES	CORRECT	NO	YES	LOW	YES	COMP # SM	B # S	umlactions	NO	umlrt	papyrus	NO	PIM	NO	NO	atl # java	NO	CFFSM	NO	YES	cffsm_specification	1	NO	N/A	N/A	N/A	VALID	We describe the design of the toolset called Toolset for UML-RT Execution, illustrate execution rules with examples, and present the results of preliminary evaluation	EMPIRICAL_LAB	We performed experiments with the execution engine using the version of the traffic lights model from Sect. 3.	controller	"In the current version of the tool we support the basic abstractions and their combinations. In order to realize the full possibilities of customizable abstractions (from Sect. 2) we have to extend the existing tool in the following ways:– easy support for user-defined semantics: the tool should support any seman- tics, by allowing the user to define new execution rules with easy interface (currently it can be done only in the source code). It should be possible to reuse execution rules as well as to introduce new rules.– extended parametrization of abstractions: some of the proposed abstractions have parameters, such as parts to abstract or states to aggregate. We wish to extend possible parameters to other elements of models. For instance, we may have new abstractions that act on specific signals or functions.– selective application of abstractions: in the current work we can combine exist- ing abstractions. We would like to extend such combinations to any semantics with parameters indicating which semantics should be used for which parts of execution and/or of the models."	F_tool_enhancement # F_expressiveness # F_additional_analysis # F_reusability		P10	78	P11	S4	both	A	SCOPUS	N/A	N/A	A	HDL code generation from UML/MARTE sequence diagrams for verification and synthesis	Ebeid E., Fummi F., Quaglia D.		Design Automation for Embedded Systems	DAES	2015	J	SPECIFIC	RTES	N/A	T	NO	CORRECT # PROD	NO	NO	LOW	NO	SEQ 	B	NO	NO	marte	papyrus	NO	PIM # PSM	NO	YES	hif	NO	NO	NO	YES	systemc # vhdl	1	NO	N/A	N/A	N/A	EVAL	The approach has been validated on three case studies,The first and second cases show the generation of SystemC models from the UML description of the software part of WSN and VHDL models from the UML description of the hardware part of WSN, respectively. Third case shows the generation of VHDL code from a complex UML scenario of building automation application which has a discontinuity between the sequence of messages.	SET_OF_EXAMPLES	 the first two cases are related to the model of a Wireless Sensor Node (WSN) while the third case study is about building automation application. 	sensing	N/A	N/A		P11	2	P12	W4	both	A	IEEE	N/A	N/A	A	"Model-Driven Design of Network Aspects ofDistributed Embedded Systems"	"Ebeid, E.; Fummi, F.; Quaglia, D."	university of verona	IEEE TRANSACTIONS ON COMPUTER-AIDED DESIGN OF INTEGRATED CIRCUITS AND SYSTEMS	TCAD	2015	J	SPECIFIC	RTES	N/A	T	YES	QUALITY	NO	NO	LOW	NO	DEP	S	NO	NO	systemc # network_ADHOC	papyrus # TOOL_INDEP	NO	PSM # HW	performance	NO	hif # c++	NO	NO	hif	YES	systemc	2	NO	N/A	N/A	N/A	VALID	"Experimental validation is done through a case study on building temper- ature control which is used through this paper to clarify the proposed conceptsin SystemC"	SET_OF_EXAMPLES	"Temperature control applica- tion of a building; Fig. 1 shows a portion of the complete sce- nario in which application tasks and corresponding dataflows are distributed over five rooms of a floor-plan. A module of the application (in Fig. 1 denoted by t1) performs an initial- ization phase; then, from each room, a sensing task (denoted by t5) sends data to a centralized controller (task t2), which sends commands to actuators in each room (task t4) according to a global heating policy. Another controlling task (denoted by t3) is also embedded into mobile devices to let people set the temperature of the environment around themtopology of building automation application and thesecond case is about modeling a wireless mesh topologyof agriculture application."	sensing	"Future work is related to position modeling and simulatingof network nodes in 3D-Space. Currently, the proposednetwork profile supports this aspect under Zone category."	F_expressiveness		P12	1	P13	W7	both	A	WOS	N/A	N/A	A	Formal verification and validation of embedded systems: the UML-based MADES approach	"Baresi, Luciano; Blohm, Gundula; Kolovos, Dimitrios S.; Matragkas, Nicholas; Motta, Alfredo; Paige, Richard F.; Radjenovic, Alek; Rossi, Matteo"	Politecnico di Milano, Cassidian, University of York	sosym	SOSYM	2015	J	SPECIFIC	RTES	N/A	T	YES	CORRECT # QUALITY # PROD	YES	NO	MEDIUM	NO	CLASS # SEQ # SM	B # S	NO	NO	marte # ADHOC	TOOL_INDEP	NO	PIM # PSM	performance	NO	egl # java	NO	lisp	java	YES	lisp	2	YES	N/A	N/A	N/A	EVAL	This section presents the application of the MADES verifi- cation and validation solutions on two examples. The first demonstrates the use of formal verification (in the form of consistency checks) on an industrial case study provided by Cassidian3. The second demonstrates the use of simulation onto the RC system introduced in Sect. 3.2	INDUSTRIAL_EXAMPLE	The case study addresses a ground-based surveillance radar system, presented in Fig. 12, and focuses on the Radar Processor # To illustrate the features of the simulation mechanisms in MADES we will use throughout this paper a simple example of system that monitors and controls the RC circuit depicted in Fig. 6. The system reads the voltage on the capacitor, and, when it detects that the voltage has remained below a cer- tain threshold for “long enough”, it increases the voltage commanded by the generator and keeps it “high” for a cer- tain amount of time	sensing	"Improving the efficiency of the verificationtool is part of our future work # As for the future work, the definition of the propertiesof interest, currently specified through a form-basedapproach, requires in-depth analysis and more domainspecificsolutions. In parallel, we will continue the finergrainedimprovement, optimization, and tailoring of theMADESsolution."	F_tool_enhancement # F_expressiveness		P13	3	P14	N5	Ivano	A	IEEE	N/A	N/A	A	A formal, model-driven design flow for system simulation and multi-core implementation	Diallo P.I., Attarzadeh-Niaki S.-H., Robino F., Sander I., Champeau J., Oberg J.	Lab-STICC - National School of Advanced Techniques of Britany (ENSTA), Brest France, Electronics and Embedded Systems - School of Information and Communication Technology, KTH Royal Institute of Technology, Stockholm Sweden	2015 10th IEEE International Symposium on Industrial Embedded Systems, SIES 2015 - Proceedings	SIES	2015	C	SPECIFIC	RTES	N/A	T	YES	PROD # CORRECT	YES	NO	LOW	NO	CLASS # STRUCT # SM	B # S	c_base # c++ # umlactions	NO	ADHOC	rhapsody	NO	PIM # PSM # HW	NO	YES	c++ # xslt	NO	ForSyDe	dsl_model	YES	c++ # systemc # xml # vhdl	2	NO	N/A	N/A	N/A	VALID	This section presents a case study taking into account several steps of D&I. The example starts with: a high-level description of the case study, a description of the semantics choices on different abstraction levels, the specification of these choices in UML Modeler and some simulation results. Next, we show sample models from the automatic generation phase for ForSyDe-SystemC and NSG. Finally a simulation results in SystemC and the presentation of allocation choices required and used resources in NSG are presented.	EXAMPLE	The model represents a JPEG Encoder system. The system processing starts from the compu- tation of a color conversion function (P 1) on an input bitmap image. The conversion is followed by a decomposition (P2- unzipping) of the image into 6 sub-blocks processed, each, by a pair of successive filtering/encoding functions such as: dct, huffman (P3 to P14). The resulting outputs are zipped and merged by the last 2 functional modules (P15 and P16) producing the final JPEG image	media_converter	Our future objectives include the experimentation on a real industrial use case to demarcate potential limitations of the approach on a bigger system and further provide the implementation of the functionality providing fully automated ProcessConstructors generator.	F_additional_evaluation # F_expressiveness		P14	75	P15	FSN7	both	S	N/A	W9	F	A	A Model-Driven Approach to Generate Mobile Applications for Multiple Platforms	"Usman, M. ; Iqbal, M.Z. ; Khan, M.U."	National University of Computer and Emerging Sciences, university of luxembourg	APSEC	APSEC	2014	C	SPECIFIC	MOBILE	N/A	T	NO	PROD	NO	NO	MEDIUM	NO	CLASS # SM	S # B	alf	NO	ADHOC	eclipseuml2	NO	PIM	NO	YES	?	NO	NO	NO	NO	java # c_sharp	1	NO	N/A	N/A	N/A	EVAL	We applied our approach on the industrial case study described in Section II to demonstrate the applicability of our approach. In this section, we demonstrate the mobile application generation for multiple platforms by using our proposed approach and also comparison with the original scramble application	INDUSTRIAL_EXAMPLE	The mobile application that we use to demonstrate our model-driven approach is Scramble. It is developed for Android and published in Amazon store by NextIn	mobile_app	N/A	N/A		P15	7	P16	W17	both	A	WOS	N/A	N/A	A	"Improving the design flow for parallel and heterogeneous architecturesrunning real-time applications: The PHARAON FP7 project"	"Héctor Posadas a,_, Alejandro Nicolás a, Pablo Peñil a, Eugenio Villar a, Florian Broekaert b,Michel Bourdelles b, Albert Cohen c, Mihai T. Lazarescu d, Luciano Lavagno d, Andrei Terechko e,Miguel Glassee f, Manuel Prieto g"	"University of Cantabria, Santander, Spainb Thales Communications & Security, Gennevilliers, Francec INRIA and École Normale Supérieure, Paris, Franced Politecnico di Torino, Torino, Italye Vector Fabrics, Eindhoven, The Netherlandsf IMEC, Leuven, Belgiumg Tedesys, Santander, Spain"	microprocessor and microsystems	MICPRO	2014	J	SPECIFIC	RTES	N/A	T	YES	CORRECT # QUALITY # PROD	NO	NO	MEDIUM	NO	COMP # STRUCT # DEP	S	NO	NO	marte	eclipseuml2	NO	PIM # PSM # HW	performance	YES	eclipseuml2	NO	NO	xml # text	YES	c_base # c++ # openmp	3	NO	N/A	N/A	N/A	EVAL	Industrial use-cases are thus required to demonstrate both the efficiency of the developed methods and their applicability in an industrial flow.	INDUSTRIAL_EXAMPLE	To ensure a wide coverage of research activities and developed methods, PHARAON targets several application domains: namely advanced 3D video processing and radio communications. On the one hand, most multimedia applications have inherent parallelism and their implementation on a parallel platform is rather direct. On the other hand, radio applications have strong real-time require- ments and hard-to-parallelize data dependencies.	media_converter # communication	"In the future, we will workon complementing these techniques with real-time schedulingpolicies and low-power adaptation schemes. # The rest of the project will be devoted to furtherintegration tests and to measure more globally the quality of theachieved results."	F_additional_analysis # F_additional_evaluation		P16	8	P17	I35	both	A	IEEE	N/A	N/A	A	Reliable execution of statechart-generated correct embedded software under soft errors	"Ferreira, Ronaldo R.; Klotz, Thomas; Vortler, Thilo; da Rolt, Jean; Nazar, Gabriel L.; Moreira, Alvaro F.; Carro, Luigi; Einwich, Karsten"	Universidade Federal do Rio Grande do Sul, Fraunhofer Institute for Integrated Circuits	Design and Diagnostics of Electronic Circuits & Systems, 17th International Symposium on	DDECS	2014	C	SPECIFIC	RTES	N/A	T	YES	CORRECT	NO	NO	LOW	NO	SM	B	umlactions	YES	NO	coside_ADHOC	NO	PIM	NO	YES	c_base	NO	nusmv	NO	NO	c_base	1	NO	N/A	N/A	N/A	VALID	"evaluates the proposed design methodology usinga real-world example from the automotive domain, namelythe control of a window lifter."	INDUSTRIAL_EXAMPLE	"The window lifter controls the window with two buttonslocated in the door, controlling the motor that puts the windowin motion. A HAL sensor is utilized to detect and signal themotion of the window."	controller	"As future work, we will address the use of formal propertiesand verification results from the model checker embedded inCOSIDE to create fault injection assertions # This idea could also beused to plug together unit tests, e.g., JUnit, and the reliabilityevaluation. At the end, using these verication artifacts thesafety cases for reliability could be generated automaticallyas [22] does for software correction."	F_tool_enhancement 		P17	12	P18	S119	both	A	SCOPUS	N/A	N/A	A	Formalizing execution semantics of UML profiles with fUML models	Tatibouet J., Cuccuru A., Gerard S., Terrier F.	cea list	Model-Driven Engineering Languages and Systems	MODELS	2014	C	GENERIC	GENERIC	N/A	I	YES	CORRECT	NO	NO	LOW	NO	ACT	B	alf	YES	NO	papyrus	YES	PIM	NO	NO	moka # java	NO	NO	N/A	N/A	N/A	N/A	N/A	moka	N/A	N/A	VALID	"This approach is validated by formalizing theexecution semantics of a subset of the MARTE profile."	EXAMPLE	MARTE profile	language	"The approach requires a background in fUML to be usable. This implies a technicaleffort to realize the first specification.The semantic specification does not handle cases were multiple stereotypesare applied over the same modeling construct. This mean there are no rules tocompose the execution of multiple semantic visitors for the same model element.The problem of semantic consistency is not adressed since we do not havemechanisms to ensure a profile semantics does not contradict fUML semantics.However it may be possible to develop automatic consistency check based on theaxiomatic foundations of fUML.The current version of tools supporting the methodlogy does not supportautomated generation of extensions to ExecutionFactory and Locus."	F_execution_correctness		P18	6	P19	S79	both	A	SCOPUS	N/A	N/A	A	Textual, executable, translatable UML	Gergely D´evai, G´abor Ferenc Kov´acs, and ´Ad´am Ancsin	university of budapest	OCL workshop	OCL 	2014	W	GENERIC	GENERIC	N/A	T	YES	CORRECT	NO	NO	LOW	NO	SM	B	txtuml	YES	NO	papyrus	NO	PIM	NO	YES	java	YES	NO	NO	NO	java	1	NO	N/A	N/A	N/A	VALID	example model	EXAMPLE	example model	synthetic	"Inheritance between two model classes encodes UML generalization. Java does notsupport multiple inheritance, which is currently a limitation of txtUML"	A_platform_issues		P19	11	P20	W27	both	A	WOS	N/A	N/A	A	"Extending UML/MARTE to Support Discrete Controller Synthesis,Application to Reconfigurable Systems-on-Chip Modeling"	"SE´BASTIEN GUILLET, FLORENT DE LAMOTTE, and NICOLAS LE GRIGUER,E´RIC RUTTEN,GUY GOGNIAT and JEAN-PHILIPPE DIGUET"	inria, lab-sticc	ACM Transactions on Reconfigurable Technology and Systems	TRETS	2014	J	SPECIFIC	RTES	N/A	T	NO	PROD	NO	NO	LOW	NO	COMP # STRUCT # SM	B # S	NO	NO	marte # marte_ADHOC	papyrus	NO	PIM	performance	YES	sdmetrics	NO	NO	bzr # java	NO	c_base	3	NO	N/A	N/A	N/A	VALID	An application model of an image processing application is presented	EXAMPLE	The generated BZR from Figure 8 is compiled and DCS (happening during compilation by calling SIGALI) succeeds, which means that a controller has been found and its code in C is given. The decision module itself is generated by default as a random choice and all this C code is then deployed on a concrete FPGA-based application system that conforms to the execution model presented in Figure 1. The platform is a XUPV5 board based on a Xilinx Virtex V FPGA, and provides two video ports that we use to capture images from a camera and display on a screen. # 	media_converter	"RecoMARTE, theMARTE-based profile used in this study, provides a clear definition of control andconfigurations. Including its modeling and transformation concepts into MARTE is aninteresting perspective to allow designers to create standard and consistent models.As a perspective for the BZR compiler, the integration of the decision module into thecontrol step, instead of being externally defined, would also be a great improvement."	F_expressiveness	performance for correctness (time)	P20	10	P21	W21	both	A	WOS	N/A	N/A	A	"Model-driven engineering of Manufacturing Automation SoftwareProjects – A SysML-based approach"	Birgit Vogel-Heuser, Daniel Schu_tz _, Timo Frank, Christoph Legat	university munchen	mechatronics	MECHATRONICS	2014	J	SPECIFIC	RTES	N/A	T	NO	PROD	YES	NO	MEDIUM	NO	adhoc	S	NO	NO	sysml # sysmlat_ADHOC	codesys	NO	PIM # PSM # HW	NO	YES	mofm2t	YES	NO	NO	NO	iec611313	1	NO	N/A	N/A	N/A	EVAL	To evaluate the proposed MDE approach, its applicability for different manufacturing systems has been investigated as well as its usability for future application engineers and its applicability in industry. The following subsections present the conducted case studies followed by the usability evaluation with human subjects,  i.e., students from mechanical engineering and the investigation of the industrial applicability by guided expert interviews.	EMPIRICAL_INDUSTRIAL	"Several case studies proving the applicability of the proposed MDE approach have been conducted using different manufacturing systems, e.g., the application example from Section 4 (see Fig. 2) and a larger scale manufacturing system (see Fig. 14). The latter incorporates plant sections for different production domains, such as fluid processing, logistics and handling robots. The considered manufacturing systems contain centralized, decentralized and distributed hardware architectures built with PLCs from different vendors. # the developed tool support was applied as part of a one-week lab course, which was attended by 10 undergraduate students. # "	manufacturing	"future research willbe conducted that investigates possibilities for an automated validationof the system specification regarding the requirementsdescribed inside a SysML-AT model as well as the validation ofthe generated IEC 61131-3 code by automatically generated andexecuted software test cases (cf. [16]). Furthermore, the presentedapproach does not yet consider the integration of predefined softwarecode during code generation. In future, we will integrate currentwork of the authors on automatic retrieval of alreadyimplemented software blocks [87]. To generalize the approach,the MDE will be extended to a more general definition of distributedsystems. This may also include microcontroller-based nodes,robot controllers and numerical controllers. To achieve this, problemswhich are solved in PLC-based environments, like time synchronizationand shared memory access, have to be addressed."	F_additional_analysis # F_reusability		P21	9	P22	S197	both	A	SCOPUS	N/A	N/A	A	A model-based framework for developing real-time safety Ada systems	Salazar E., Alonso A., De Miguel M.A., De La Puente J.A.	university of madrid	adae	adae	2013	C	SPECIFIC	RTES	N/A	T	NO	QUALITY # PROD	NO	NO	MEDIUM	NO	COMP # STRUCT # CLASS # SEQ	B # S	NO	NO	marte	rsa	NO	PIM # PSM	performance	YES	qvt # mtl # rsa	NO	NO	mast # uml_model	NO	ada # rtsj	2	NO	N/A	N/A	N/A	EVAL	A case study is described for a subsystem of the on-board software of UPMSat2, a university micro-satellite project.	SET_OF_EXAMPLES	a case study some examples from UPMSat2, an experimental micro- satellite project which is being carried out at Universidad Polit _ecnica de Madrid (UPM)	communication	Future work includes enhancing the transformations between the system model and the analysis model, which are now at an early stage of development, and adding support to include functional code generated from other tools (e.g. Simulink) into the real-time skeletons generated by the framework.	F_tool_enhancement		P22	16	P23	W9	both	A	WOS	N/A	N/A	A	Environment modeling and simulation for automated testing of soft real-time embedded software	"Iqbal, Muhammad Zohaib; Arcuri, Andrea; Briand, Lionel"	Simula, university of luxembourg, ,university of islamabad	sosym	SOSYM	2013	J	SPECIFIC	RTES	N/A	T	YES	CORRECT	NO	NO	MEDIUM	NO	CLASS # SM	B # S	java	NO	marte # ADHOC	TOOL_INDEP	NO	PIM	performance	NO	mofscript	NO	NO	NO	YES	java	1	NO	N/A	N/A	N/A	EVAL	we followed the guidelines of reporting case studies in software engineering presented by Runeson et al. [74,75].	EMPIRICAL_INDUSTRIAL	We selected five different RTES as part of our study. # Two of the cases were industrial RTES. One industrial RTES, Industrial Case A (IC-A) is the sorting machine system that we have discussed as a motivating exam- ple throughout the paper.5 # The second industrial system, Industrial Case B (IC-B), is a marine seismic acquisition system, which has five environ- ment components with an average of 12 states per compo- nent # We also developed three artificial problems of varying complexity that also belong to different domains. Two of the artificial problems (AP1 and AP2) were inspired by one of our industrial case studies and deal with RTES interacting with multiple sensors in different situations. The third artificial problem (AP3) is inspired by a train control gate system discussed in [76]. 	manufacturing # sensing # synthetic	"The focus of the work presented here was only on RTESwith soft time deadlines in the order of hundreds of milliseconds,with an accepted jitter of a few milliseconds. However,the modeling methodology proposed in this paper is independentof this limitation and can be used to model systemswith stricter deadlines. This limitation is due to the choiceof Java as a target language for simulation. The choice ofJava was made based on the needs of our industry partnersbut may obviously not be appropriate in other environments.To use the approach in the presence of stricter deadlines, apossible option is to use a virtual machine supporting RealTime Java (Java RT) (e.g., [70]) on a real-time operating system(e.g., [71]). We have not currently evaluated the practicalimplications of using Java RT, but the specificationsclaim that the standard java code is completely portable to aJava RT machine, which provides a precision in the order ofnanoseconds.One of the limitations of the proposed simulator generatoris that we still cannot be completely sure about its correctness.As discussed earlier, to test the simulator generator, wewrote a number of test cases by hand. We also ran the generatedsimulator with the testing engine to test faulty RTES(artificial problems and industrial cases) and were able totrigger failures on test cases revealing seeded faults withouttriggering failures that were unwarranted. This increased ourconfidence in the correctness of the transformation rules. Theevaluation of such transformations is still an open researchquestion [78] and no suitable tool for testing model to texttransformation is available yet.Based on the experiments that we ran [44] to test differenttypes of RTES (artificial problems and industrial cases), andas discussed above, the generated simulator seems effectivein supporting test automation for fault detection. Because this is very time consuming, we however did so only onfive RTES. One important question is whether our simulationrules are complete enough to simulate the environmentof any RTES. To address this possible limitation,the industrial cases and artificial problems that we selectedwere from diverse domains. One case was of an automatedbottle recycling system and the other was a marine seismicacquisition system. Both the case studies involve controloriented, embedded software, which we believe are themost suitable target applications of our methodology. Twoof the artificial problems that we developed depicted thecommon scenarios of RTES interactions with sensors inthe environment. The third artificial problem was selectedfrom the domain of train control systems. The diversityof the domains of these RTES, which environment wassimulated, increased our confidence in the completenessof the transformation rules and the simulation frameworkfor the RTES developed using our modeling methodology.We evaluated correctness and completeness of the transformationrules by generating simulators for several testmodels, three artificial problems, and two industrial cases.Though it cannot be guaranteed that the implemented transformationrules are complete and correct, note that this doesnot affect the general validity and applicability of the simulationgeneration approach based on environment modelingusing extensions of UML. Such rules will be refined andaugmented over time."	A_platform_issues # F_execution_correctness	In RTES performance can be related only to correctness	P23	15	P24	A290	both	A	ACM	N/A	N/A	A	Combining fUML and profiles for non-functional analysis based on model execution traces	Luca Berardinelli, Philip Langer, Tanja Mayerhofer	university of l'aquila, vienna university of technology	QoSA '13: Proceedings of the 9th international ACM Sigsoft conference on Quality of software architectures	QOSA	2013	C	GENERIC	GENERIC	N/A	I	YES	QUALITY	NO	NO	LOW	NO	CLASS # ACT # OBJ	B # S	umlactions	NO	marte	eclipseuml2	YES	PIM # PSM # HW	performance	NO	fumlvm # java	NO	NO	N/A	N/A	N/A	N/A	N/A	fumlvm	N/A	N/A	VALID	"Based on the annotated eHealthSys UML model describedin Section 4.1, we are able to calculate the execution timeof the RPD software service."	EXAMPLE	"eHealthSys is a distributed component-based system thatprovides software services to support doctors' everyday ac-tivities such as the retrieval of patients' data (RPD service)where descriptive texts about the patients' medical historiesand diseases, as well as images like X-rays are combined in amultimedia report that is displayed on the doctors' personaldigital assistance device (PDA)."	information_system	"In future work, we plan to develop further model-basedanalysis tools and apply di erent analysis methodologiesbased on the proposed framework. To also support method-ologies that build upon probabilities annotated in the UMLmodel, we will extend our framework to allow for obtainingall possible execution traces from a UML model and weightthe values in the traces, such as execution time, according tothe annotated probabilities in each trace. Moreover, we willwork towards supporting parallelism in UML activities andadditional parts of UML that are currently not integratedwith fUML, such as state machines"	F_additional_analysis # F_expressiveness		P24	13	P25	A317	both	A	ACM	N/A	N/A	A	Executing and debugging UML models: an fUML extension	Yoann Laurent, Reda Bendraou, Marie-Pierre Gervais	upmc paris, paris ouest	SAC '13: Proceedings of the 28th Annual ACM Symposium on Applied Computing	SAC	2013	C	GENERIC	GENERIC	N/A	I	YES	CORRECT	NO	NO	LOW	NO	CLASS # ACT	B # S	umlactions	YES	NO	eclipseuml2 # papyrus	YES	PIM	NO	NO	fumlvm # java	YES	NO	N/A	N/A	N/A	N/A	N/A	fumlvm	N/A	N/A	VALID	"This section presents the evaluation of our fUML exten-sion by  rst, comparing our prototype with other debuggersfrom the literature and  nally, by testing it with a case study."	EXAMPLE	"a robotic sys-tem. This activity is in charge of updating the position ofthe robot and adapting the sensor accordingly."	mobile_robot	"Moreover, due to the fact that generally software engineerslack of skills in formal techniques, we investigate the useof a Model Checker in our prototype to analyse automati-cally the behaviors of activities in order to detect deadlocks,livelocks and to calculate reachability coverage."	F_model_checking		P25	14	P26	FSN4	both	S	N/A	I384	F	A	"Multi-Paradigm Semantics for Simulating SysMLModels using SystemC-AMS"	Daniel Chaves Cafe, Filipe Vinci dos Santos, Cecile Hardebolle, Christophe Jacquet, Fr´ed´eric Boulanger	supelec, thales	Specification & Design Languages (FDL), 2013 Forum on	FDL	2013	C	GENERIC	GENERIC	N/A	T	YES	CORRECT	NO	NO	LOW	NO	STRUCT # SM	B # S	NO	NO	sysml	eclipseuml2	NO	PIM	NO	YES	atl # acceleo	NO	NO	dsl_model	NO	systemc # vhdl	2	NO	N/A	N/A	N/A	VALID	Consider the following example	EXAMPLE	a vehicle with speed control. This system can be modeled by two blocks: one to model the dynamics of the vehicle and another to model the speed control.	controller	"We will continue our work by defining the semantics ofother formalisms in SysML diagrams and by improving thespecification of testbenches and use cases. We also would liketo use semantic verification techniques in our transformationengine in order to verify that SysML models are not onlysyntactically correct, but also have coherent semantics.In the future, we wish to apply our strategy to other languagesbeyond SystemC-AMS. In order to do so, we have consideredgeneralizing our engine with an intermediary abstractsemantics to facilitate transformations to other languages. Thedevelopment of a generic model of computation is an on-goingfield of research of the GeMoC initiative"	F_expressiveness # F_execution_correctness # F_platform_independence		P26	17	P27	A171	both	A	ACM	N/A	N/A	A	"A Plug-in Based Approach for UML ModelSimulation"	Alek Radjenovic, Richard F. Paige, Louis M. Rose, Jim Woodcock, Steve King	unversity of york	ECMFA'12: Proceedings of the 8th European conference on Modelling Foundations and Applications	ECMFA	2012	C	GENERIC	GENERIC	N/A	T	YES	CORRECT # QUALITY	NO	YES	MEDIUM	NO	SM # CLASS	B # S	siml	YES	NO	cassandra	NO	PIM	safety	NO	prolog # cassandra	NO	NO	smile	NO	smile	2	NO	N/A	N/A	N/A	EVAL	The fully-automatic operation was tested on a number of case studies from the railway signalling domain, the smallest containing 7 classes and 25 SIML statements, and the largest 89 classes and several hundred SIML statements	SET_OF_INDUSTRIAL_EXAMPLES	of case studies from the railway signalling domain	controller	"Our next steps will include investigation into more action languages, othersimulation platforms, as well as further generalisation and formalisation of theapproach. We anticipate an increased activity in the model simulation arenaand are also mindful of the fact that new domain-specific action languages mayemerge. As part of our desire for a broader research impact, our intention is tostandardise the interaction between the simulation tools and action languages"	F_expressiveness # F_platform_independence # F_tool_enhancement		P27	23	P28	I169	both	A	IEEE	N/A	N/A	A	A Model Driven Approach for Android Applications Development	"Parada, A.G.; de Brisolara, L.B."	universidade federal de pelotas	Computing System Engineering (SBESC), 2012 Brazilian Symposium on	SBESC	2012	C	SPECIFIC	MOBILE	N/A	T	NO	PROD	NO	NO	LOW	NO	CLASS # SEQ	B # S	NO	YES	NO	TOOL_INDEP # papyrus	NO	PIM	NO	YES	gencode	NO	NO	NO	NO	java	1	NO	N/A	N/A	N/A	VALID	"To demonstrate our approach, acase study was conducted, in which an Android applicationwas modeled in UML and code was generated from it. Togenerate code, the extension of GenCode was used."	EXAMPLE	"The Snake, an open source application from Androiddeveloper web site [10], was chosen as case study"	mobile_app	"generate code, the extension of GenCode was used.However, the actual version of GenCode tool that supportsthe proposed approach, only made an automatic transformationfrom UML class and sequence diagrams to the targetAndroid Java code, without consider any optimization inthe generated code. As future work, we plan to extend thistool in order to consider the good practices for Androiddevelopment [16], and thus generating efficient code."	F_code_optimization		P28	21	P29	I253	both	A	IEEE	N/A	N/A	A	Modeling and simulation of secure wireless sensor network	"Diaz, A.; Penil, P.; Sanchez, P.; Sancho, J.; Rico, J."	university of cantabria, tst sistemas	Specification and Design Languages (FDL), 2012 Forum on	FDL	2012	C	SPECIFIC	RTES	N/A	T	YES	QUALITY	NO	NO	LOW	NO	COMP # STRUCT	S	NO	NO	marte		NO	PIM # PSM	security # performance	NO	acceleo	NO	NO	NO	YES	xml	1	NO	N/A	N/A	N/A	VALID	"In this section, we present the results obtained from thevirtual simulator using our attack simulation technique. Forthis, we have designed a small network with nine nodesinterconnected"	EXAMPLE	"Forthis, we have designed a small network with nine nodesinterconnected"	communication	"The next step for this research is the modeling of new typesof attacks in the virtual simulator to enable the simulation ofall kinds of attacks"	F_expressiveness		P29	22	P30	I256	both	A	IEEE	N/A	N/A	A	An Optimized Compilation of UML State Machines	"Charfi, A.; Mraidha, C.; Boulet, P."	cea list, university lille	Object/Component/Service-Oriented Real-Time Distributed Computing (ISORC), 2012 IEEE 15th International Symposium on	ISORC	2012	C	GENERIC	GENERIC	N/A	T	NO	PROD # QUALITY	NO	NO	LOW	NO	SM # ACT	B	umlactions	YES	NO	papyrus	YES	PIM	codesize	YES	acceleo # gcc	NO	NO	NO	NO	gimple	1	NO	N/A	gimple	gcc	VALID	"We have designed the bathtub system (Fig.6) using thePapyrus modeler and compiled the model using GUML. Wealso designed the same model using Rhapsody 7.5.3. In fact,both iUML 2.4r.5 and Bridgepoint 3.2.4 do not supportguards, that’s why we could not model the state machine ofFig.6 using those tools"	EXAMPLE	We have designed the bathtub system	controller	"Our coming work will consists insupport larger part of UML state machines constructs like orthogonaland composite states, fork and join nodes by keepingin mind the production of a compact code an important criterionfor embedded systems."	F_expressiveness		P30	18	P31	S369	both	A	SCOPUS	N/A	N/A	A	Symbolic execution of UML-RT state machines	Zurowska K., Dingel J.	queen's university	Proceedings of the ACM Symposium on Applied Computing	SAC	2012	C	SPECIFIC	RTES	N/A	I	YES	CORRECT	NO	NO	LOW	NO	SM	B	c++	NO	umlrt	rsa	NO	PIM	NO	NO	ffsm	NO	CFFSM	N/A	N/A	N/A	N/A	N/A	rsa	N/A	N/A	VALID	We performed several experiments using the tool with dif- ferent UML-RT State Machines. Table 2 presents the results of these experiments (performed on a standard PC with Intel Core i7 CPU 2.67 GHz, 3GB of RAM)	SET_OF_EXAMPLES	In the table the first UML-RT State Machine is the one presented in Figure 4. The third UML-RT State Machine, which we have obtained from one of our industrial partners, models interactions be- tween a user and a phone. It has more than 100 states, which are nested up to the sixth level. In the simplified model (the second UML-RT State Machine in Table 2) some of the tran- sitions are disabled using contradictory guards, so parts of the UML-RT State Machine are not reachable.	mobile_app	As presented, the prototype implementation performs the analysis of the subset of UML-RT State Machines, but it has some limitations. One of them is inherited from the Choco solver [1], which cannot solve arbitrary complex con- straints, but for straightforward relations between variables the performance is acceptable. The other limitation is the result of the exploration in Algorithm 1, which may limit the scalability. However, the presented technique, besides using symbolic values to aggregate states, is applied to a single state machine, so the analysis is performed on the unit level. As illustrated by the above case studies, the technique can be applied to analyze non-trivial UML-RT State Machines. The general applicability of the method to industrial models is future work and will directly depend on the nature of the action code used in these models. # Apart from the future work already mentioned, more work is required to determine the applicability of the technique to industrial-size UML-RT models. If performance or function- ality improvements become necessary we plan to use aggre- gation of states that go beyond data values. Finally, work allowing for the symbolic analysis of collections of capsules by combining symbolic execution trees is currently ongoing. # In the presented mapping of UML-RT State Machines not all available fea- tures are considered. For instance, we omit history states or internal transitions. Although these are important model- ing elements, their treatment is not essential in the presented approach. The support for these elements is left for future work. # The general applicability of the method to industrial models is future work and will directly depend on the nature of the action code used in these models.	F_scalability # F_additional_evaluation # F_expressiveness		P31	19	P32	W98	both	A	WOS	N/A	N/A	A	Achieving process modeling and execution through the combination of aspect and model-driven engineering approaches	"Bendraou, Reda; Jezequel, Jean-Marc; Fleurey, Franck"	inria, irisa, sintef, marie curie	JOURNAL OF SOFTWARE: EVOLUTION AND PROCESS	JSEP	2012	J	SPECIFIC	WORKFLOW	N/A	I	NO	CORRECT	NO	NO	LOW	NO	ACT # CLASS	B # S	umlactions	NO	uml4spm_ADHOC	eclipseuml2	NO	PIM	NO	YES	kermeta	NO	NO	N/A	N/A	N/A	N/A	N/A	kermeta	N/A	N/A	VALID	Figure 3 gives a simple yet representative example of a portion of a software process modeled using the UML4SPM notation. This process example was provided by our industrial partners within the IST European Project MODELPLEX‡. We will use it throughout the paper to demonstrate our approach.	INDUSTRIAL_EXAMPLE	"The ‘Inception Phase’ activity[ represents the context of this process (i.e., container for all process’s activities). This is indicated by the start-blob in the top-left corner. It is used to coordinate between different process’s activities and WorkProducts. The ‘M’ letter is used to indicate that the activity is machine-executable (H for Human execution). One important aspect is the use of CallBehaviorActions in order to initiate/call process’s activities (e.g., ‘Elaborate Analysis Model’ call). In the call, one has to precise (1) whether the call is synchronous (use of a complete arrow in the top-left corner) or asynchronous (half arrow, e.g., ‘Construction Phase’ call); (2) the parameters of the call, which represent WorkProducts inputs/outputs of the activity. Another aspect is the use of Decision and Merge nodes. The Decision Node allows for the expression of a choice of actions to perform depending on a condition (in this case, if the analysis model is valid or not). Conditions have to be expressed on activity edges (i.e., object flows) and will be evaluated at runtime. The merge node here is used to express that the ‘Elaborate Analysis model’ activity may be triggered by one of the two possibilities. The first one is when the ‘Inception Phase’ activity is launched. The second one is when the analysis model validation fails."	business_process	A larger evaluation of the use of UML4SPM in production stages is underway. In the context of process modeling, an important perspective of this work is the definition of the set of activities and constraints that would allow a process definition to be modified at runtime and without restarting the process execution i.e., preserving the process state.	F_additional_evaluation # F_runtime_model_update		P32	20	P33	A115	both	A	ACM	N/A	N/A	A	Contracts for Model Execution Verification	Eric Cariou, Cyril Ballagny, Alexandre Feugas, Franck Barbier	University of Pau # softeam # inria lille-nord	ECMFA'11: Proceedings of the 7th European conference on Modelling foundations and applications	ECMFA	2011	C	GENERIC	GENERIC	N/A	I	YES	CORRECT	NO	NO	LOW	NO	SM	B	NO	YES	NO	eclipseuml2	NO	PIM	NO	NO	java # mocas # eclipseuml2	YES	NO	N/A	N/A	N/A	N/A	N/A	mocas	N/A	N/A	VALID	"This first experimentation has shown the feasibility of our approach. The nextstep is to focus on usage of the contract evaluation."	EXAMPLE	"an execution example of a UML state machine specifying thebehavior of a microwave"	consumer_electronics	"The next step is to focus on usage of the contract evaluation. Notably, we plan to implement model checking techniques using our execution contracts as test oracles.The goal is to be able to execute an executable model through a frameworkallowing the simulation of environment interactions. Then, several traces arebuilt with a set of different entry models and contracts must be valid for allexecution traces. Another perspective is using contract for managing softwareadaptation at runtime. Contracts can uncover a failure and lead toexecuting recovering policies."	F_runtime_model_update # F_model_checking		P33	25	P34	A85	both	A	ACM	N/A	N/A	A	"On the Performance of UML State MachineInterpretation at Runtime"	Edzard H?fig, Peter H. Deussen, Ina Schieferdecker	Fraunhofer FOKUS # Technical university of Berlin	SEAMS '11: Proceedings of the 6th International Symposium on Software Engineering for Adaptive and Self-Managing Systems	SEAMS	2011	C	GENERIC	GENERIC	N/A	I	NO	PROD # QUALITY	NO	NO	LOW	NO	SM	B	NO	YES	NO	eclipseuml2	NO	PIM	performance # adaptability	YES	java # eclipseuml2 # mvflex	NO	NO	N/A	N/A	N/A	N/A	N/A	ADHOC	N/A	N/A	VALID	"We were able to show that the interpretation of BMsat runtime is a viable approach. The performance assessmentshows an average overhead of a factor of circa 20 whenusing a Java-based BM interpreter, compared with an implementationthat relies on statically generated C++ code."	SET_OF_EXAMPLES	SYNTHETIC	synthetic	"The combination of interpretation and dynamic compilation is also interesting. We are already employing just-intime(JIT) compilation for the expression statements, butmight extend this approach to BMs (or parts thereof), e.g. dependingon the adaptation frequency.While our work covers a basis for runtime adaptation ofsystem behaviour, we did not investigate the adaptation processfor BMs, itself."	F_execution_strategy_combination		P34	24	P35	i277	both	A	IEEE	N/A	N/A	A	"Framework to Simulate the Behavior of EmbeddedReal-Time Systems Specified in UML Models"	Marco A. Wehrmeister, Joao G. Packer, Luis M. Ceron	Santa Catarina State University (UDESC)	2011 Brazilian Symposium on Computing System Engineering	SBESC	2011	C	SPECIFIC	RTES	N/A	T	YES	CORRECT	NO	NO	LOW	NO	ACT # SM # SEQ	B	umlactions	NO	marte	TOOL_INDEP	NO	PIM	NO	NO	java	NO	NO	NO	YES	dercs	1	NO	N/A	N/A	N/A	VALID	"The initial experiments was intended to check if FUMBeSsimulation executes as expected. The goal was to test if actions,behaviors, loops and branches are executed accordingto DERCS’ behavioral semantics (see section III). Thus, fourdistinct algorithms have been specified in a UML modeland transformed to DERCS: (i) an algorithm that containsa loop, in which the result of an mathematical expression isaccumulated into a variable; two algorithms to calculate thefactorial of a number – (ii) a recursive and (iii) an interactiveversion; and (iv) an algorithm to generate the value for agiven position in the Fibonacci sequence. Experiments havedemonstrated that all algorithm executed in the simulationprototype produced the expected outcomes."	SET_OF_EXAMPLES	"Following, FUMBeS was used to simulate the behaviorof a real-world application, namely, the movement controlsystem of an Unmanned Aerial Vehicle (UAV) implementedas a helicopter"	mobile_robot	The next steps are in the direction of early verification and validation of embedded and real-time systems by means of their UML specifications. A UML virtual machine using FUMBeS is envisaged. It would simulate of the whole embedded and real-time system, i.e. the execution of its active objects and their concurrent execution, respecting the time constraints. In addition, a CASE tool to execute test cases upon the UML specification is also foreseen. This tool would allow the specification and automatic execution of test cases during the modeling phase. Thus, if any change in the UML model affects any behavior considered correct, the engineers would be warned about the problems.	F_additional_analysis		P35	27	P36	S434	both	A	SCOPUS	N/A	N/A	A	Modelica code generation from ModelicaML state machines extended by asynchronous communication	Pohlmann U., Tichy M.	university of paderborn, university of augsburg	Proceedings of the 4th International Workshop on Equation-Based Object-Oriented Modeling Languages and Tools, EOOLT 2011	EOOLT	2011	C	SPECIFIC	RTES	N/A	T	YES	CORRECT	NO	NO	LOW	NO	SM # COMP # STRUCT	B # S	modelica	NO	modelicaml	papyrus	NO	PIM	NO	NO	acceleo # dymola # c_base # sanz	NO	NO	NO	YES	modelica	1	NO	N/A	N/A	N/A	VALID	running example	EXAMPLE	We modeled the rainwater two tanks system as shown in Figure 1 with ModelicaML An example for a hybrid mechatronic system is a rainwater system with two tanks as shown in Figure 1. The use case for the example is that water flows into tank 1 when it is raining. The tank collects all the rain until it is full. If the tank is full the additive water flows into the rain drainage. The second tank stands on a lower floor. It is a closed tank with no drainage. Periodically, water is taken from tank 2. Therefore, tank 2 needs always a certain amount of water which it can get from tank 1.	controller	"Currently, ModelicaML only supports the specification of timing behavior in a rudimentary way. Therefore, we do not specify discrete timing behavior in our protocol. As a result it is difficult to grasp the timing behavior of the dis- crete controller and the communication protocol. This can be seen within the sequence diagram, because several mes- sages that are sent one after another have the same time of sending. # Currently, we work on a new version of our translation directly to the StateGraph2 library. We want to combine StateGraph2 with algorithmic code for constructs which depend on a particular order of execution. Translating to StateGraph2 has the advantage that the resulting models are structured similarly to the ModelicaML state machines and are, thus, easier to understand by the developer than the generated Modelica code. Though, we have to extend the StateGraph2 library to support message sending and receiving for that translation. Furthermore, we want to add more syntactical con- structs to ModelicaML state machines for the better spec- ification of temporal behavior. Specifically, clocks, time guards and invariants as used in timed automata will be added to ModelicaML state machines. Finally, we want to translate simulation runs done in a Modelica tool back to ModelicaML. For example, the states and transitions which are taken during a simulation run can be appropriately vi- sualized using sequence diagrams."	F_expressiveness # F_tool_enhancement # F_traceability		P36	26	P37	S507	both	A	SCOPUS	N/A	N/A	A	Code generation for UML 2 activity diagrams: Towards a comprehensive model-driven development approach	Gessenharter D., Rauscher M.	Ulm University	ECMFA	ECMFA	2011	C	GENERIC	GENERIC	N/A	T	NO	PROD	NO	NO	LOW	NO	CLASS # ACT	S # B	umlactions	YES	NO	eclipseuml2	NO	PIM	NO	YES	java # eclipseuml2	YES	NO	uml_model	NO	java	2	NO	N/A	N/A	N/A	VALID	For evaluation of our prototype, we modeled 	EXAMPLE	 an information system for public transportation of an imaginary city and generated code from that mode The structural model consists of 17 classes, 14 associations and 3 association classes, the behavioral model consists of a single activity of 14 Actions, 8 control flows and 15 object flows. Applying our code generation approach, the output is 1700 lines of code for the structural model including the implementation of actions and another 700 lines of code for the implementation of the activity.	information_system	"However, as composing complex flows by combining multiple control nodes between actions makes code generation very difficult – if not im- possible – our approach is limited to a single control node between two actions. This limitation may be dropped when implementing control nodes as dedicated classes with methods for token propagation and token consumption. # Our approach is currently limited with regard to a complex composition of flows by using control nodes. Pushing this boundary by analyzing complex flows which can – if matching special patterns – be implemented without explicit token propagation is our next step. Depending on the limitations remaining after that, a decision of whether implementing flows explicitly or not will be taken. A major objection is, that generating code for token propagation may become close to generating an interpreter which computes each step at runtime. Apart from that, supporting additional modeling concepts like e.g. Stream- ing of object flows are further steps to take. Even architectural aspects like deployment raising the complexity of communication between instances might be considered, thus integrating behavior, structure and other aspects of UML."	F_expressiveness # F_tool_enhancement		P37	28	P38	PN1	Ivano	A	IEEE	N/A	N/A	A	From UML to Petri Nets: The PCM-Based Methodology	"Distefano, Salvatore; Scarpa, Marco; Puliafito, Antonio"	University of Messina 	IEEE TRANSACTIONS ON SOFTWARE ENGINEERING	TSE	2011	J	GENERIC	N/A	N/A	T	YES	QUALITY	NO	NO	LOW	NO	UC # OBJ # ACT # DEP	B # S	umlactions	NO	umlspt	argouml	NO	PIM # PSM # HW	performance	NO	Java	NO	petrinet	PCM	YES	petrinet	2	NO	N/A	N/A	N/A	VALID	example	EMPIRICAL_LAB	As an example of the UML-PCM-PN methodology, we examine the MusicStream application. It is a client-server Web-based software application for music streaming/ downloading.	web	"In this sense, we retain of particular interest the topics of reliability, availability, and performability evaluation. The specific literature offers many interesting starting points on the subject [24], [30], [31] that stimulate us in extending our technique. Another important extension is to enlarge the measures’ set, in particular by identifying the key para- meters (service times, delays, queue lengths, etc.), also allowing their parametric evaluations.A longer term objective of such research is to investigate other techniques for evaluating PCM models, such as QN and PEPA, integrating all of them into a unique framework that automatically selects which is the best for analyzing a given part of the system, implementing a combined- optimized solution algorithm. Another point to further investigate is with regard to the fork-join modeling with the specific goal to investigate how to model broken couple, i.e., fork without join."	F_additional_analysis #  F_expressiveness		P38		P39	I384	both	A	IEEE	N/A	N/A	A	"Closing the Gap between UML-based Modeling,Simulation and Synthesis of Combined HW/SWSystems"	Fabian Mischkalla, Da He, Wolfgang Mueller	university of paderborn	Design, Automation & Test in Europe Conference & Exhibition (DATE), 2010	DATE	2010	C	SPECIFIC	RTES	N/A	T	YES	PROD	NO	NO	LOW	NO	ACT # STRUCT	B # S	c++	NO	sysml # ADHOC	artisan	NO	PIM # PSM # HW	NO	YES	artisan # tdk # sdl # shadowacs # agilitysc	NO	NO	systemc	NO	vhdl	2	NO	N/A	N/A	N/A	VALID	"We have evaluated our approach by two case studies. Thefirst one has the focus on comodeling and cosimulation toindicate the performance of our cosimulation concept. Thesecond case study implements an image processing objectdetection algorithm to demonstrate the design flow in realapplication and the straightforward refinement to FPGA."	SET_OF_INDUSTRIAL_EXAMPLES	In the first experiment we compare the cosimulation performance based on a point-to-point data transfer scenario under different TLM simulation modes # The case study implements an image processing video pipeline specification from the Embedded Video Detection (EmViD) project [11]. The system is composed of three HW blocks. It first reads 80x60 pixel images in binary format from memory and performs two sequential morphological operations, i.e., erosion and dilation.	media_converter	"However, we can also identify a major drawback which isdue to applied commercial tools. In our current environment,error messages which are generated in later design steps canhardly be linked to objects and classes in the UML/SysMLmodel. Nevertheless, the support of Studio for code/modelsynchronization partly helps to avoid this problem at least inthe first code generation."	F_traceability		P39	29	P40	S704	both	A	SCOPUS	N/A	N/A	A	"Matilda: A Generic and Customizable Framework for DirectModel Execution in Model-Driven Software Development"	Hiroshi Wada, Adam Malinowski, Junichi Suzuki, Katsuya Oba	university of massachusetts, ogis, harvard	Handbook of Research on Software Engineering and Productivity Technologies: Implications of Globalization	HRSE	2009	J	N/A	GENERIC	N/A	T	NO	QUALITY	NO	YES	MEDIUM	NO	CLASS # SEQ	B # S	NO	NO	matilda_ADHOC	TOOL_INDEP	NO	PIM # PSM	performance	YES	java # matilda	NO	NO	NO	YES	java	1	NO	N/A	N/A	N/A	EVAL	This section empirically evaluates the execution overhead and memory footprint of UML- VM # The overhead includes the time for each plugin to process an input model, which contains varying numbers of classes (from 1 to 100 classes)6 and read/write the input model from/to a blackboard. The proportion of each plugin’s overhead to total overhead does not change significantly by varying the number of classes in an input model	SET_OF_EXAMPLES	SYNTHETIC	synthetic	"One of them is to implementand evaluate additional plugins. They include a model debugging plugin. It is being designed tointercept transformation errors of input models and runtime errors of generated Java bytecode, andidentify the sources of the errors in textual and graphical manners. For example, the error sourceswill be graphically displayed on input BPMN/UML diagrams so that developers can intuitivelyunderstand and fix the errors. The design of the model debugging plugin will follow the Model-levelTesting and Debugging Specification (Model-level Testing and Debugging Specification, RevisedSubmission, 2006), which Object Management Group standardizes.An extended set of empirical measurements is also planned to provide additional performanceimplications of Matilda. Matilda will be evaluated with larger scale of applications on larger sizeof network environments"	F_tool_enhancement # F_traceability # F_additional_evaluation		P40	32	P41	W263	Fede	A	WOS	N/A	N/A	A	SystemC/C-Based Model-Driven Design for Embedded Systems	"Riccobene, Elvinia; Scandurra, Patrizia; Bocchio, Sara; Rosti, Alberto; Lavazza, Luigi; Mantellini, Luigi"	universitá di milano, universitá di bergamo, stmicroelectronics, cefriel, dial face	ACM TRANSACTIONS ON EMBEDDED COMPUTING SYSTEMS	TECS	2009	J	SPECIFIC	RTES	N/A	T	YES	PROD # QUALITY	NO	NO	MEDIUM	NO	CLASS # COMP # STRUCT # SM # OBJ # DEP	S # B	c_base # c++ # systemc	NO	systemc # ADHOC	sparx	NO	PIM # PSM # HW	performance	YES	vb	NO	NO	NO	NO	systemc # c_base # c++	1	YES	N/A	N/A	N/A	VALID	"For the hardware part, we have developed several different case studies, sometaken from the SystemC distribution like the simple bus design, and someof industrial interest # The code generator has beentested primarily on this example, and it produced an executable and complete(i.e., including both structural and behavioral parts) SystemC code"	SET_OF_INDUSTRIAL_EXAMPLES	"It is made of 1,018lines of code that implement a high performance, abstract bus model "	communication	"It would be desirable to have a single SystemCbasedenvironment for both architecture exploration and the application softwareimplementation, eliminating the need to create two separate validationcontexts. However, more planning and analysis must be conducted. The modelingof complex concurrency aspects over threads, and the model composition ofSystemC threads, and POSIX C threads through automated interfaces is stilla challenging issue.In the future, we aim also at identifying characteristics of reusable modeltransformations and ways of achieving reuse by collecting in a library preciseabstraction/refinement transformation patterns according to the levels of abstraction:functional, TLM, behavioral, BCA, and RTL. In particular, we arefocusing on the TLM level to model the communication aspects at a certainnumber of TLM sublevels according to the OSCI TLM standard [OSCI group2008]. We believe the use of fine-grained transformations that are being composed(chaining) would be beneficial, both increasing the productivity and thequality of the developed systems.Recently [Gargantini et al. 2008b; Carioni et al. 2008], we are also tacklingthe problem of formally analyzing UML visual models. We aim at complementingthe proposed design methodology with a formal analysis processfor high-level system validation and verification (V&V), which involves the abstractstate machine (ASM) [B¨orger and St¨ark 2003] formal method. Our overall goal is to provide a design environmentwhere both the application software and the hardware architectureare described together by a multiviews UML model representing the mappingof the functionality (of the application software) onto an architecture. Moreover,through a formal analysis process the system components can be functionallyvalidated and verified early at high-levels of abstraction, and even in a transparentway (i.e., no strong skills and expertise on formal methods are requiredto the user) by the use of the ASM formal method and supporting analysistools"	F_additional_analysis # F_reusability		P41	30	P42	A330	both	A	ACM	N/A	N/A	A	Performance evaluation of UML2-modeled embedded streaming applications with system-level simulation	Tero Arpinen, Erno Salminen, Timo D. Hämäläinen, Marko Hännikäinen	tampere university	EURASIP Journal on Embedded Systems , Volume 2009	EURASIP	2009	J	SPECIFIC	RTES	N/A	T	YES	QUALITY	NO	YES	LOW	NO	ACT # STRUCT	B # S	umlactions	NO	marte # ADHOC	TOOL_INDEP	NO	PIM # PSM # HW	performance	NO	java # systemcsim	NO	NO	systemc	YES	systemc # xml	2	NO	N/A	N/A	N/A	VALID	"This section presents a case study that illustrates the applicabilityof the modeling methods and tool framework inpractice"	EXAMPLE	"The application is a video codec on amultiprocessorplatform. We used an approach in which new functionalityrepresenting web client was modeled and added to anexisting video codec system in Figure 6 and the systemwas simulated and optimized based on the monitoredinformation"	media_converter	"Future work consists of taking accountthe impact of SW platform in the RTES performancemetamodel. This includes the workload of SW platformservices (such as file access and memory allocation) as wellas scheduling of tasks with different policies."	F_additional_analysis		P42	36	P43	I564	both	A	IEEE	N/A	N/A	A	"A co-design approach forembedded system modeling andcode generation with UML and MARTE"	"Vidal, J.; de Lamotte, F.; Gogniat, G.; Soulard, P.; Diguet, J.-P."	European University of Brittany, SODIUS	Design, Automation & Test in Europe Conference & Exhibition, 2009. DATE '09.	DATE	2009	C	SPECIFIC	RTES	N/A	T	NO	PROD	NO	NO	LOW	NO	CLASS # COMP # STRUCT # SM # OBJ	B # S	c++	NO	 marte # sysml	rhapsody	NO	PIM # PSM # HW	NO	YES	mdworkbench	NO	NO	NO	NO	vhdl # embeddedc	1	NO	N/A	N/A	N/A	VALID	To test our approach, we designed a viterbi decoder	EXAMPLE	"we designed a Viterbi decoder tovalidate the rules. An external component sends events withan integer parameter(the value to be decoded). After decoding,a new event, also with an integer parameter is sent from thedecoder to another external component."	media_converter	N/A	N/A		P43	31	P44	I565	both	A	IEEE	N/A	N/A	A	SecureMDD: A Model-Driven Development Method for Secure Smart Card Applications	"Moebius, N.; Stenzel, K.; Grandy, H.; Reif, W."	university of augsburg	Availability, Reliability and Security, 2009. ARES '09. International Conference on	ARES	2009	C	SPECIFIC	RTES	N/A	T	NO	QUALITY # CORRECT	NO	NO	LOW	NO	CLASS # ACT # DEP	B # S	umlactions	NO	ADHOC	NO	NO	PIM # PSM	security	YES	qvt # xpand	NO	kiv	uml_model	NO	java	3	NO	N/A	N/A	N/A	VALID	To illustrate our approach we use an application which is used to re- place coins by electronic cash. That is, the smart card stores money and the owner of a card can pay with it, for example at a copying machine.	EXAMPLE	we use an application which is used to re- place coins by electronic cash	consumer_electronics	N/A	N/A		P44	37	P45	S652	both	A	SCOPUS	N/A	N/A	A	Realization of UML class and state machine models in the C# code generation and execution framework	Anna Derezi_ska and Romuald Pilitowski	Warsaw University of Technology	Informatica	INFORMATICA	2009	J	GENERIC	GENERIC	N/A	T	NO	PROD # CORRECT	NO	NO	LOW	NO	CLASS # SM	B # S	NO	YES	NO	TOOL_INDEP	NO	PIM	NO	YES	fxu	NO	NO	NO	YES	csharp	1	NO	N/A	N/A	N/A	VALID	"The presented approach for building the csharp code and executing the automatically created applications was tested on over fifty models. The first group of ten models was aimed at classes. # Models from the next group (above forty models) comprised different diagrams, including both classes and their state machines. All possible constructs of UML 2.x behavioral state machines were used in different situations in the models. The biggest design included five state machines with about 80 states and 110 transitions, using complex and orthogonal states, different kinds of pseudostates and submachine states"	SET_OF_EXAMPLES	"The first one was a design of a web page, whichwas a part of MDA project called Acceleo. Themodel described a design of a web page # The second onepresented a metamodel of an object-oriented modelinglanguage"	information_system # language	"In the future work, we prepare other complex models implementing telecommunication problems. Capability of using advance state machine features and building reliable applications is very important in these cases. As a complementary approach, another solution for csharp code generation based on csharp profiles is under development. Transform OCL Fragments Into csharp (T.O.F.I.C.) tool supports labelling of UML model elements with stereotypes reflecting csharp concepts. Target code is generated from a refined UML model and OCL constraints. In this approach, a model can be verified both during placing stereotypes and/or code generation process. Using dedicated profiles enforce more precise mapping to a given target language and therefore also checking of model correctness. However it requires more effort of a developer while creating a refined model"	F_additional_evaluation # F_tool_enhancement #		P45	33	P46	W255	both	A	WOS	N/A	N/A	A	eUDEVS: Executable UML with DEVS Theory of Modeling and Simulation	"Risco-Martin, Jose L.; de la Cruz, Jesus M.; Mittal, Saurabh; Zeigler, Bernard P."	university of madrid, Dunip Technologies	simulation	simulation	2009	J	GENERIC	GENERIC	N/A	T	YES	CORRECT	NO	NO	LOW	NO	PACK # CLASS # COMP # STRUCT # SEQ # SM # TIME	S # B	NO	YES	NO	rsa	NO	PIM	NO	NO	xml # java # xslt	NO	NO	xml # java	YES	devs	1	NO	N/A	N/A	N/A	VALID	we demonstrate the laid concepts with a complete example	EXAMPLE	The ef-p model is a simple coupled model consisting of three atomic models (Figure 21).	synthetic	"We are currently in process of completing TUDEVS that allows cross transformation between XFD-DEVS and UML XMI format. The tool design will be reported in our forthcoming publication. Further there are technologies like Scalable Vector Graphics (SVG) that allow rendering XML information into graphical diagrams; we are currently incorporating this feature in TUDEVS as well. We are also exploring auto-generation of sequence diagrams form XFD-DEVS specifications using message based interfaces and temporal logic. Having the said capability of integrating UML and DEVS, we are also pursuing development of executable architectures based on Department of Defense Architecture Framework (DoDAF). Another important extension of this work is mapping with SysML for the simple reason that it is an extension of UML applied to systems engineering domain, while DEVS lie in the domain already. A mapping is underway and will be soon reported."	F_tool_enhancement # F_expressiveness		P46	34	P47	W262	Fede	A	WOS	N/A	N/A	A	Model-driven development of composite context-aware web applications	Georgia M. Kapitsaki, Dimitrios A. Kateros, George N. Prezerakos, Iakovos S. Venieris	university of athens, technological education institute of piraeus	Information and Software Technology	INFSOF	2009	J	SPECIFIC	WEB	N/A	T	NO	PROD	NO	NO	LOW	NO	CLASS # ACT # SM	S # B	NO	NO	ADHOC	eclipseuml2	NO	PIM	NO	YES	java # eclipseuml2 # apache_velocity	NO	NO	NO	NO	java # xml	1	NO	N/A	N/A	N/A	VALID	"In order to validate the proposed architecture and developmentmethodology a number of test cases have been carried out duringthe generator development and model definition in an iterativeprocess. The initial testing involved the introduction of abstractweb services that did not provide concrete functionality (e.g. web service A with operations A to E). In the next phase the developmentof applications consisting of one business service was testedand finally the combination of more web services was included,where the main validation performed lied in the proper behaviourof the generated application."	SET_OF_EXAMPLES	"context-aware webapplication in order to provide the cinema customers with anoverview of the scheduled movies and means to perform a reservation"	web	"We alsoaim at performing further validation of the approach (e.g. usingfunctionalities offered by online web services11) and evaluate itby introducing a number of development metrics (e.g. generationtime for different levels of model complexity, number and extentof source code sections where developer intervention may be required,etc.).In future work we will explore the use of historical contextinformation in the context adaptation of the web application andhow it can be handled in a generic context-aware framework.The framework will also address the issue of context storage allowingthe storage and retrieval of past context information, as well asthe intelligent combination of these past contexts into a resultingcomposite context. This way other entities can exploit the addedinformation to adapt their behaviour to previous context valuesor a series of events indicating the user situation context (e.g. seriesof locations visited may indicate that the user is on a trip). Thearea of past context values requires however further study followingthe concerns raised in the paper"	F_additional_evaluation # F_platform_improvement		P47	35	P48	A195	F	A	ACM	N/A	N/A	A	"Execution and Simulation of (Profiled) UML Models usingPópulo"	Lidia Fuentes, Jorgue Manrique, Pablo Sanchez	university of malaga	MiSE '08: Proceedings of the 2008 international workshop on Models in software engineering	MiSE	2008	W	GENERIC	GENERIC	N/A	I	YES	CORRECT	NO	YES	LOW	NO	CLASS # ACT	B # S	umlactions	YES	NO	TOOL_INDEP	NO	PIM	NO	NO	populo	YES	NO	N/A	N/A	N/A	N/A	N/A	populo	N/A	N/A	VALID	"Theexample described below explains this idea."	EXAMPLE	"A simple software application models a robot that canperform certain movements, indicated by certain commands,in a particular area."	mobile_robot	"Thus, the unique requirements that a UML edi-tor must ful¯ll to be used in conjunction with Populo are: (1)to support the UML action language (which is a prerequisitefor executable modelling, not of Populo); and (2) to be ableto export UML models to the XMI format."	N/A		P48	38	P49	BSN4	both	S	N/A	A317	B	A	"Towards a UML virtual machine:implementing an interpreter for UML 2 actions andactivities"	crane, dingel	queen's university	CASCON	CASCON	2008	C	GENERIC	GENERIC	N/A	I	YES	CORRECT	NO	NO	LOW	NO	ACT	B	umlactions	YES	NO	TEXT	NO	PIM	NO	NO	java # acti	NO	NO	N/A	N/A	N/A	N/A	N/A	acti	N/A	N/A	VALID	running example	EXAMPLE	We use a running example to explore how ACTi can be used to execute and analyze an activity. Consider the activity in Figure 2. This activity takes a Car object, and changes the value of its year attribute. The new value of the attribute depends on the result of a decision. In this case, both outgoing edges of the decision have true guards, meaning that either outcome is equally possible.	synthetic	"In addition, the creation of a true modelchecker for activities would be useful. Thiswork would require rewriting the scheduler tobe able to exhaustively explore each path, e.g.,a depth-¯rst search through the graph, withbacktracking.Finally, ACTi currently represents only apartial implementation of the kind of virtualmachine envisioned in [18]. In future work, weplan to broaden the scope of the interpreter tocover additional diagram types. Our formal-ization and implementation of actions togetherwith the fact that the System Model was de-signed to support di®erent types of behavioralspeci¯cation diagrams (initial formalizations ofinteractions and state machines can be foundin [7, 8]) will be extremely helpful here."	F_model_checking # F_expressiveness		P49	39	P50	I646	both	A	IEEE	N/A	N/A	A	Automatic Performance Model Transformation from UML to C++	"Pllana, S.; Benkner, S.; Xhafa, F.; Barolli, L."	university of vienna, university of catalonia, fukuoka institute of technology	Parallel Processing - Workshops, 2008. ICPP-W '08. International Conference on	ICPP-W	2008	W	GENERIC	GENERIC	N/A	T	YES	QUALITY	NO	NO	LOW	NO	ACT	B	c++	YES	NO	performanceprophet_ADHOC	NO	PIM	performance	NO	performanceprophet	NO	NO	xml	YES	c++	2	NO	N/A	N/A	N/A	VALID	"Figure 7 depicts the process of UML based specificationof a sample performance model for a hypothetical program.The user specifies the type of performance modelingelements and their flow. Furthermore, the user may associatea code fragment and a cost function to each performancemodeling element."	EXAMPLE	 sample performance model for a hypothetical program	synthetic	N/A	N/A		P50	40	P51	I659	both	A	IEEE	N/A	N/A	A	An Execution Framework for MARTE-based Models	Chokri Mraidha, Yann Tanguy, Christophe Jouvray, François Terrier, Sébastien Gérard	cea list	Engineering of Complex Computer Systems, 2008. ICECCS 2008. 13th IEEE International Conference on	ICECCS	2008	C	SPECIFIC	RTES	N/A	T	NO	PROD	NO	NO	LOW	NO	CLASS # SM	S # B	umlactions	NO	marte	NO	NO	PIM	performance	YES	accorduml	NO	NO	NO	NO	c++	1	NO	N/A	N/A	N/A	VALID	example	EXAMPLE	cruise control	controller	"The Accord execution platform could beparameterized with a subset of MARTE conceptsproperties but do not support all parameters values,hence this introduces some restrictions in usage ofMARTE. These limitations are handled in theAccord|UML methodology. To reduce the number oflimitations and enhance MARTE models executionsupport, an ongoing work consists in enhancing theAccord execution platform parameterization."	F_expressiveness # F_platform_improvement		P51	41	P52	I672	F	A	IEEE	N/A	N/A	A	UJECTOR: A Tool for Executable Code Generation from UML Models	"Usman, Muhammad; Nadeem, A.; Tai-hoon Kim"	Mohammad Ali Jinnah University, Hannam University,	Advanced Software Engineering and Its Applications, 2008. ASEA 2008	ASEA	2008	C	GENERIC	GENERIC	N/A	T	NO	PROD	NO	NO	LOW	NO	CLASS # SEQ # ACT	S # B	umlactions	YES	NO	NO	NO	PIM	NO	YES	java	NO	NO	NO	NO	java	1	NO	N/A	N/A	N/A	VALID	"for experimentalvalidation of the UJECTOR too"	EXAMPLE	"This section describes the Point-Of-Sale(POS) case study that is used for experimentalvalidation of the UJECTOR tool. The real-lifeexample is created in UML case tool whichautomatically generates XMI [8] for UMLmodel"	consumer_electronics	N/A	N/A		P52	42	P53	I717	both	A	IEEE	N/A	N/A	A	MDD4SOA: Model-Driven Service Orchestration	"Mayer, P.; Schroeder, A.; Koch, N."	Ludwig-Maximilians-Universität, cirquent cmbh	Enterprise Distributed Object Computing Conference, 2008. EDOC '08. 12th International IEEE	EDOC	2008	C	SPECIFIC	SOA	N/A	T	NO	PROD	NO	NO	LOW	NO	ACT	B	umlactions	NO	uml4soa_ADHOC	TOOL_INDEP	NO	PIM # PSM	NO	YES	java	NO	jolie	dsl_model	NO	bpel # wsdl # java # jolie	3	NO	N/A	N/A	N/A	VALID	As a running example to illustrate our approach, we have chosen an orchestration scenario from the eUniversity domain: we model the management process of a student thesis from the announcement of a thesis topic by a tutor to the final assessment and student notification. This example has been taken from one of the case studies of the Sensoria project 	EXAMPLE	we model the management process of a student thesis	business_process	We will continue to work on modelling and transformation of other service artefacts, in particular on modelling service interfaces and protocol specifications. Other service-oriented issues will be addressed as well, e.g. the dynamic reconfiguration of SOAs. We also plan to evaluate the advantages of using the UML for visualizing our model transformations.	F_expressiveness # F_additional_evaluation		P53	43	P54	PN2	Ivano	A	IEEE	N/A	N/A	A	Enabling the Evolution of Service-Oriented Solutions Using an UML2 Profile and a Reference Petri Nets Execution Platform	"Fabra, J.; Pena, J.; Ruiz-Cortes, A.; Ezpeleta, J."	University of Zaragoza, University of Seville	Internet and Web Applications and Services, 2008. ICIW '08. Third International Conference on	ICIW	2008	C	SPECIFIC	SOA	N/A	T	YES	PROD	YES	NO	LOW	NO	SM # COLLAB	B # S	umlactions	NO	ADHOC	argouml	NO	PIM	NO	YES	xml # java # xslt	NO	petrinet	NO	YES	petrinet	1	NO	N/A	N/A	N/A	VALID	example	EXAMPLE	Figure 1 depicts the role model of our case study, a business collaboration. The Dealer sells products which are sent to customers by the Logistic platform, allow- ing the tracking during the delivery process.	business_process	From this study, new challenges have been opened, as for example trying to perform direct transformations from models to implementation using well known description standards (such as the Business Process Modeling Notation – BPMN, for example) and rule-based transformation processes (such as the ATLAS Transforma- tion Language – ATL, for example).	F_tool_enhancement # F_additional_target		P54		P55	I780	both	A	IEEE	N/A	N/A	A	A Model-Based Approach for Platform-Independent Binary Components with Precise Timing and Fine-Grained Concurrency	"Tim Schattkowsky; Gregor Engels, Alexander Fo_rster"	"University of Paderborn; C-LAB"	40th Hawaii International Conference on System Sciences - 2007	HICSS	2007	C	SPECIFIC	RTES	N/A	T	NO	QUALITY	NO	NO	LOW	NO	ACT # SM # INTER	B	umlactions	NO	aep_ADHOC	NO	NO	PIM # PSM	performance	YES	upad	NO	NO	NO	YES	uvm	1	NO	N/A	uvm	upad	VALID	example	EXAMPLE	As an example we will consider the main Operation of an MP3 decoder Class implementing the essential MP3 decode algorithm	media_converter	Future Work will include the completion of the surrounding tool suite beyond the prototype state and porting the UVM	F_tool_enhancement # F_portability_enhancement		P55	44	P56	S1122	both	A	SCOPUS	N/A	N/A	A	FSMC+, a tool for the generation of Java code from statecharts	Tiella R., Villafiorita A., Tomasi S.	university of trento	PPPJ	PPPJ	2007	C	GENERIC	GENERIC	N/A	T	NO	PROD	NO	NO	HIGH	NO	SM	B	java	YES	NO	TOOL_INDEP	NO	PIM	NO	YES	FSMC+	NO	nusmv	smcl	YES	java # nusmv # html	2	NO	N/A	N/A	N/A	EVAL	The experimentations conducted within the ProVotE project are among the biggest (if not the biggest) experimentation of e-voting in Italy.	EMPIRICAL_INDUSTRIAL	The jprovote system has been used, so far, in four different experimentations held during local elections and for electing the representatives of the students in a local High School. So far more that 11000 citizens tried our system. No glitches have been signaled during the experimentations	information_system	"Future work will include the extension of supported notationto concurrent regions and to new versions of the UMLmetamodel, which are not currently supported"	F_expressiveness		P56	45	P57	S1379	both	A	SCOPUS	N/A	N/A	A	MDA-based approach for embedded software generation from a UML/MOF repository	Do Nascimento F.A.M., Oliveira M.F.D.S., Wehrmeister M.A., Pereira C.E., Wagner F.R.	Universidade Federal do Rio Grande do Sul	SBCCI 2006 - 19th Symposium on Integrated Circuits and Systems Design	SBCCI	2006	C	SPECIFIC	RTES	N/A	T	NO	QUALITY # PROD	NO	NO	LOW	NO	COMM # SEQ	B	NO	NO	umlspt	TOOL_INDEP	NO	PIM # PSM	performance	YES	qvt	NO	NO	dsl_model	NO	java	3	NO	N/A	N/A	N/A	VALID	To illustrate the use of the meta-modeling infrastructure in the implementation of the code generation tool, a case study is presented. (example!!)	EXAMPLE	To illustrate the use of the meta-modeling infrastructure in the implementation of the code generation tool, a case study is presented. It consists in the design of a real-time embedded automation and control system for an intelligent wheelchair to support people with special needs.	mobile_robot	"The improvement of the generated code by considering moreinformation from the models in the meta-data repository is oneof the proposed future efforts. We also intend to model otherplatforms and to define additional transformation rules fromapplication and platform models into implementation models"	F_expressiveness # F_traceability		P57	46	P58	I944	both	A	IEEE	N/A	N/A	A	A Model-Based Approach for Executable Specifications on Reconfigurable Hardware	Tim Schattkowsky, Wolfgang Mueller, Achim Rettberg 	"University of Paderborn; C-LAB"	Proceedings of the Design, Automation and Test in Europe Conference and Exhibition (DATE’05)	DATE	2005	C	SPECIFIC	RTES	N/A	T	NO	QUALITY	NO	NO	LOW	NO	CLASS # SM # SEQ	B # S	umlactions	NO	aep_ADHOC	NO	NO	PIM # PSM # HW	performance	YES	aep_vm # ADHOC	NO	NO	NO	YES	aep	1	NO	N/A	aep	ADHOC	VALID	"We have implemented a prototype of the AEP virtual_machine using Handel-C on a Celoxica RC 200 evaluation_board equipped with a Virtex II XC2V 1000-4. The_virtual machine resides on the SmartMedia Card (SMC)_and the binary encoded UML programs are loaded to the_SRAM via the RS-232 interface. The current Acknowledgements implementation runs with 35 MHz. However, this is just a limitation of the RC 200 board due to the SMC card without any implications for our concepts. Our evaluation focused on the runtime of the bytecode interpreter, as it is essential for computations."	SET_OF_EXAMPLES	We implemented five different UML examples and compared their runtimes with C implementations on a C167 with 20 MHz. These examples include a factorial calculation (fak), an adder-tree (tree), a Fibonacci calculation (fib), a butterfly node (butterfly) with 4 multipliers and two adders, and a matrix addition (mmadd).	math_functions	The evaluation of more complex programs is still necessary. Furthermore, we plan to evaluate different memory management and scheduling implementations	F_additional_evaluation		P58	47	P59	I977	both	A	IEEE	N/A	N/A	A	"Automatic Code Generation from a UML modelto JEC 61131-3 and system configuration tools"	Birgit Vogel-Heuse, Daniel Witsch, Uwe Katzke	"University ofWuppertal"	International Conference on Control and Automation	ICCA	2005	C	SPECIFIC	RTES	N/A	T	NO	PROD	NO	NO	LOW	NO	CLASS # COMM # SEQ # DEP	S # B	NO	NO	umlpa	artisan	NO	PIM # PSM # HW	NO	YES		NO	NO	NO	NO	iec611313	1	NO	N/A	N/A	N/A	VALID	the strategy adn the code generator were evaluated with a simple applciation example.	EXAMPLE	example representing  a manufacturing process in which workpieces are processed differently depending on the results of a material analysis (inductive, optical)	manufacturing	the actual benefits of OO have not been exploited # the benefits but also any problems will become apparent in a more complex system, e.g. A real machinery e.g. For packaging # the intergration of network aspects is another target # the integration of uml 2.0 with its system diagram is another working package	F_expressiveness # F_code_optimization		P59	48	P60	W559	Ivano	A	WOS	N/A	N/A	A	Embedded System Design Using Formal Model Refinement: An Approach Based on the Combined Use of UML and the B Language 	"Voros, NS; Snook, C; Hallerstede, S; Masselos, K"	INTRACOM S.A, University of Southampton, KeesDA S.A.	DESIGN AUTOMATION FOR EMBEDDED SYSTEMS	DAES	2004	J	SPECIFIC	RTES	N/A	T	YES	QUALITY # PROD # CORRECT	YES	NO	LOW	NO	PACK # CLASS # SM	B # S	ub	NO	ADHOC	rrose	NO	PIM # PSM # HW	performance	YES	atelier_b	NO	b_base # bhdl	formal_spec	NO	c_base # c++ # vhdl # systemc	2	NO	N/A	N/A	N/A	VALID	The main goal of this section is to present the application of the proposed approach in practice 	INDUSTRIAL_EXAMPLE	The case study is from the wireless telecommunication systems domain and is based on HIPERLAN/2, a protocol standard for broadband wireless networks. 	communication	A version is being produced that accepts XMI [26] as input and is independent of any particular UML tool, and will run within the Eclipse [10] open development platform. This will enable better integration of U2B with the B proof tools, which are also being ported to Eclipse. Finally, it is planned to extend the BHDL translator to higher level descriptions of circuits. It is expected that this combined treatment will facilitate the automation of many steps in lower level refinements.	F_tool_enhancement 	The method relies on formal proof of system properties at every phase of the co-design cycle. 	P60	49	P61	I1162	both	A	IEEE	N/A	N/A	A	Deriving executable process descriptions from UML	"di Nitto, E.; Lavazza, L.; Schiavoni, M.; Tracanella, E.; Trombetta, M."	politecnico di milano	Software Engineering, 2002. ICSE 2002. Proceedings of the 24rd International Conference on	ICSE	2002	C	SPECIFIC	WORKFLOW	N/A	T	NO	PROD	NO	NO	LOW	NO	ACT # CLASS # SM	S # B	NO	YES	NO	TOOL_INDEP	NO	PIM	NO	YES	xslt	NO	z	xml	YES	java	2	NO	N/A	N/A	N/A	VALID	As a first test of the validity of the approach, we have modeled and enacted the process of managing anomalies detected during software testing and operation.	EXAMPLE	 process of managing anomalies detected during software testing and operation.	business_process	If a modeler does not provide all the necessary information in state diagrams, the code produced by the automatic translation will not be complete. However, the modeler is always free to edit the code produced by the translator, thus changing or adding the features of the process as desired. # Up to now we did not consider modeling the interface with the human agents and/or the development tools used in the process (i.e., the elements appearing in the upper part of Figure 1). Sometimes it could be interesting to model in UML such interfaces (e.g., to describe the behavior of a tool, which messages it generates under what conditions, etc.). However this is not a central issue as long as tools are _generally give, not developed specifically for the  process. In any case the implementationof tools is quite different from the enactment of processes: for tool development the traditional usage of UML is perfectly suited.	F_expressiveness		P61	50	P62	S2115	both	A	SCOPUS	N/A	N/A	A	A UML tool for an automatic generation of simulation programs	L.B. Arief and N.A. Speirs	Department Computing Science	Proceedings Second International Workshop on Software and Performance WOSP 2000	WOSP	2000	W	GENERIC	GENERIC	N/A	T	YES	CORRECT # QUALITY	NO	NO	LOW	NO	CLASS # SEQ	B # S	NO	YES	NO	umleditor_ADHOC	NO	PIM	performance	NO	java	NO	NO	dsl_model	YES	java	2	NO	N/A	N/A	N/A	VALID	Here, we show how we represent the dynamic aspect of the same system (as a sequence diagram) using our UML tool. Each simulation is run for a length of 10,000, which generates 1929 jobs. The results obtained from the two simulations are compared	SET_OF_EXAMPLES	"To illustrate how the UML can be used to design a system which may be simulated, let us consider a simple queuing system where jobs arrive into the system randomly with some probability distribution every certain interval. The jobs are then placed into a queue before being processed by a server. The server takes a certain time to process each job before the job is completed. The performance data consists of the time taken for a job to be completed. By keeping track of how many jobs are completed and the total time spent by these jobs in the system, we can work out the average response time"	synthetic	"The UML tool that we have constructed can beimproved in several ways. First, the class diagramcan be utilised more to allow the random propertiesof the static objects to be specified. This can beachieved by attaching a “note” to the appropriateclass. The associations between the classes can alsobe used to indicate the multiplicity of the objectsinvolved in the system. This is useful, for example, toevaluate the effect of adding another server toprocess a queue."	F_expressiveness		P62	51	P63	W734	Ivano	A	WOS	N/A	N/A	A	Testing and simulating production control systems using the Fujaba environment	Jorg Niere, Albert Zundorf 	AG-Softwaretechnik, Fachbereich 17, Universita_t Paderborn 	APPLICATIONS OF GRAPH TRANSFORMATIONS WITH INDUSTRIAL RELEVANCE	AGTIVE	2000	C	GENERIC	GENERIC	N/A	T	YES	PROD # CORRECT	NO	YES	LOW	NO	CLASS # ACT # COMM # SM	B # S	umlactions # java # graph_rewrite_rules	YES	NO	fujaba_ADHOC	NO	PIM	NO	YES	java	YES	NO	NO	NO	java	1	NO	N/A	N/A	N/A	VALID	demonstration how to use the Fujaba environment in order to simulate a specification of a shuttle based production control system 	EXAMPLE	shuttle based production control system 	manufacturing	Future work is to improve the simulation features of DOBS. For example, we need a script language for the configuration of DOBS, where parts of the configuration can be placed directly in the specification. Attributes shall be assigned with drawing objects, where e.g. a lamp attribute is displayed as a lamp and not as a text which says true or false. Another current project is a topology editor. E.g. a track-based production system may be plugged together in an editor offering track icons. This topology will be trans- lated into graph rewrite rules to create initial starting object structures for the simulation afterwards. 	F_platform_improvement # F_expressiveness		P63	52	